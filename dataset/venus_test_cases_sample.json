[
    {
        "question_id":131,
        "name":"palindrome-partitioning",
        "test_case":"{\"input\": \"xpbpmgnkxz\", \"output\": \"[['x', 'p', 'b', 'p', 'm', 'g', 'n', 'k', 'x', 'z'], ['x', 'pbp', 'm', 'g', 'n', 'k', 'x', 'z']]\"}\n{\"input\": \"xkjqqfmlwuccu\", \"output\": \"[['x', 'k', 'j', 'q', 'q', 'f', 'm', 'l', 'w', 'u', 'c', 'c', 'u'], ['x', 'k', 'j', 'q', 'q', 'f', 'm', 'l', 'w', 'u', 'cc', 'u'], ['x', 'k', 'j', 'q', 'q', 'f', 'm', 'l', 'w', 'uccu'], ['x', 'k', 'j', 'qq', 'f', 'm', 'l', 'w', 'u', 'c', 'c', 'u'], ['x', 'k', 'j', 'qq', 'f', 'm', 'l', 'w', 'u', 'cc', 'u'], ['x', 'k', 'j', 'qq', 'f', 'm', 'l', 'w', 'uccu']]\"}\n{\"input\": \"ntrhulheaycu\", \"output\": \"[['n', 't', 'r', 'h', 'u', 'l', 'h', 'e', 'a', 'y', 'c', 'u']]\"}\n{\"input\": \"izxdqzit\", \"output\": \"[['i', 'z', 'x', 'd', 'q', 'z', 'i', 't']]\"}\n{\"input\": \"tlfqmxipsvybwo\", \"output\": \"[['t', 'l', 'f', 'q', 'm', 'x', 'i', 'p', 's', 'v', 'y', 'b', 'w', 'o']]\"}\n{\"input\": \"fiqgmspa\", \"output\": \"[['f', 'i', 'q', 'g', 'm', 's', 'p', 'a']]\"}\n{\"input\": \"fbpyhtgj\", \"output\": \"[['f', 'b', 'p', 'y', 'h', 't', 'g', 'j']]\"}\n{\"input\": \"hyqwnvpghno\", \"output\": \"[['h', 'y', 'q', 'w', 'n', 'v', 'p', 'g', 'h', 'n', 'o']]\"}\n{\"input\": \"bbb\", \"output\": \"[['b', 'b', 'b'], ['b', 'bb'], ['bb', 'b'], ['bbb']]\"}\n{\"input\": \"iiwibbns\", \"output\": \"[['i', 'i', 'w', 'i', 'b', 'b', 'n', 's'], ['i', 'i', 'w', 'i', 'bb', 'n', 's'], ['i', 'iwi', 'b', 'b', 'n', 's'], ['i', 'iwi', 'bb', 'n', 's'], ['ii', 'w', 'i', 'b', 'b', 'n', 's'], ['ii', 'w', 'i', 'bb', 'n', 's']]\"}\n{\"input\": \"hgikilwvfhbhdzc\", \"output\": \"[['h', 'g', 'i', 'k', 'i', 'l', 'w', 'v', 'f', 'h', 'b', 'h', 'd', 'z', 'c'], ['h', 'g', 'i', 'k', 'i', 'l', 'w', 'v', 'f', 'hbh', 'd', 'z', 'c'], ['h', 'g', 'iki', 'l', 'w', 'v', 'f', 'h', 'b', 'h', 'd', 'z', 'c'], ['h', 'g', 'iki', 'l', 'w', 'v', 'f', 'hbh', 'd', 'z', 'c']]\"}\n{\"input\": \"cceoeauiddsdl\", \"output\": \"[['c', 'c', 'e', 'o', 'e', 'a', 'u', 'i', 'd', 'd', 's', 'd', 'l'], ['c', 'c', 'e', 'o', 'e', 'a', 'u', 'i', 'd', 'dsd', 'l'], ['c', 'c', 'e', 'o', 'e', 'a', 'u', 'i', 'dd', 's', 'd', 'l'], ['c', 'c', 'eoe', 'a', 'u', 'i', 'd', 'd', 's', 'd', 'l'], ['c', 'c', 'eoe', 'a', 'u', 'i', 'd', 'dsd', 'l'], ['c', 'c', 'eoe', 'a', 'u', 'i', 'dd', 's', 'd', 'l'], ['cc', 'e', 'o', 'e', 'a', 'u', 'i', 'd', 'd', 's', 'd', 'l'], ['cc', 'e', 'o', 'e', 'a', 'u', 'i', 'd', 'dsd', 'l'], ['cc', 'e', 'o', 'e', 'a', 'u', 'i', 'dd', 's', 'd', 'l'], ['cc', 'eoe', 'a', 'u', 'i', 'd', 'd', 's', 'd', 'l'], ['cc', 'eoe', 'a', 'u', 'i', 'd', 'dsd', 'l'], ['cc', 'eoe', 'a', 'u', 'i', 'dd', 's', 'd', 'l']]\"}\n{\"input\": \"fg\", \"output\": \"[['f', 'g']]\"}\n{\"input\": \"qywzhiwimwmgxlo\", \"output\": \"[['q', 'y', 'w', 'z', 'h', 'i', 'w', 'i', 'm', 'w', 'm', 'g', 'x', 'l', 'o'], ['q', 'y', 'w', 'z', 'h', 'i', 'w', 'i', 'mwm', 'g', 'x', 'l', 'o'], ['q', 'y', 'w', 'z', 'h', 'iwi', 'm', 'w', 'm', 'g', 'x', 'l', 'o'], ['q', 'y', 'w', 'z', 'h', 'iwi', 'mwm', 'g', 'x', 'l', 'o']]\"}\n{\"input\": \"gfx\", \"output\": \"[['g', 'f', 'x']]\"}\n{\"input\": \"tcnybsjtivprev\", \"output\": \"[['t', 'c', 'n', 'y', 'b', 's', 'j', 't', 'i', 'v', 'p', 'r', 'e', 'v']]\"}\n{\"input\": \"hsmgui\", \"output\": \"[['h', 's', 'm', 'g', 'u', 'i']]\"}\n{\"input\": \"kfwdxczzqfm\", \"output\": \"[['k', 'f', 'w', 'd', 'x', 'c', 'z', 'z', 'q', 'f', 'm'], ['k', 'f', 'w', 'd', 'x', 'c', 'zz', 'q', 'f', 'm']]\"}\n{\"input\": \"whbmbdann\", \"output\": \"[['w', 'h', 'b', 'm', 'b', 'd', 'a', 'n', 'n'], ['w', 'h', 'b', 'm', 'b', 'd', 'a', 'nn'], ['w', 'h', 'bmb', 'd', 'a', 'n', 'n'], ['w', 'h', 'bmb', 'd', 'a', 'nn']]\"}\n{\"input\": \"bzfd\", \"output\": \"[['b', 'z', 'f', 'd']]\"}\n{\"input\": \"zvxxfvzkfevfmqky\", \"output\": \"[['z', 'v', 'x', 'x', 'f', 'v', 'z', 'k', 'f', 'e', 'v', 'f', 'm', 'q', 'k', 'y'], ['z', 'v', 'xx', 'f', 'v', 'z', 'k', 'f', 'e', 'v', 'f', 'm', 'q', 'k', 'y']]\"}\n{\"input\": \"jtekqpmlrkhngqyx\", \"output\": \"[['j', 't', 'e', 'k', 'q', 'p', 'm', 'l', 'r', 'k', 'h', 'n', 'g', 'q', 'y', 'x']]\"}\n{\"input\": \"erfbsxhqwivseebr\", \"output\": \"[['e', 'r', 'f', 'b', 's', 'x', 'h', 'q', 'w', 'i', 'v', 's', 'e', 'e', 'b', 'r'], ['e', 'r', 'f', 'b', 's', 'x', 'h', 'q', 'w', 'i', 'v', 's', 'ee', 'b', 'r']]\"}\n{\"input\": \"pdsqgsowrk\", \"output\": \"[['p', 'd', 's', 'q', 'g', 's', 'o', 'w', 'r', 'k']]\"}\n{\"input\": \"ukwoyy\", \"output\": \"[['u', 'k', 'w', 'o', 'y', 'y'], ['u', 'k', 'w', 'o', 'yy']]\"}\n{\"input\": \"nzdmohvmczulhg\", \"output\": \"[['n', 'z', 'd', 'm', 'o', 'h', 'v', 'm', 'c', 'z', 'u', 'l', 'h', 'g']]\"}\n{\"input\": \"xxultckmebds\", \"output\": \"[['x', 'x', 'u', 'l', 't', 'c', 'k', 'm', 'e', 'b', 'd', 's'], ['xx', 'u', 'l', 't', 'c', 'k', 'm', 'e', 'b', 'd', 's']]\"}\n{\"input\": \"gwg\", \"output\": \"[['g', 'w', 'g'], ['gwg']]\"}\n{\"input\": \"nwyohqjade\", \"output\": \"[['n', 'w', 'y', 'o', 'h', 'q', 'j', 'a', 'd', 'e']]\"}\n{\"input\": \"xabwvyxbfnws\", \"output\": \"[['x', 'a', 'b', 'w', 'v', 'y', 'x', 'b', 'f', 'n', 'w', 's']]\"}\n{\"input\": \"mxugky\", \"output\": \"[['m', 'x', 'u', 'g', 'k', 'y']]\"}\n{\"input\": \"pataap\", \"output\": \"[['p', 'a', 't', 'a', 'a', 'p'], ['p', 'a', 't', 'aa', 'p'], ['p', 'ata', 'a', 'p']]\"}\n{\"input\": \"rivuiliyoknrwjd\", \"output\": \"[['r', 'i', 'v', 'u', 'i', 'l', 'i', 'y', 'o', 'k', 'n', 'r', 'w', 'j', 'd'], ['r', 'i', 'v', 'u', 'ili', 'y', 'o', 'k', 'n', 'r', 'w', 'j', 'd']]\"}\n{\"input\": \"nblkyacvyw\", \"output\": \"[['n', 'b', 'l', 'k', 'y', 'a', 'c', 'v', 'y', 'w']]\"}\n{\"input\": \"hpbxxsaadq\", \"output\": \"[['h', 'p', 'b', 'x', 'x', 's', 'a', 'a', 'd', 'q'], ['h', 'p', 'b', 'x', 'x', 's', 'aa', 'd', 'q'], ['h', 'p', 'b', 'xx', 's', 'a', 'a', 'd', 'q'], ['h', 'p', 'b', 'xx', 's', 'aa', 'd', 'q']]\"}\n{\"input\": \"k\", \"output\": \"[['k']]\"}\n{\"input\": \"siubvcxowzejk\", \"output\": \"[['s', 'i', 'u', 'b', 'v', 'c', 'x', 'o', 'w', 'z', 'e', 'j', 'k']]\"}\n{\"input\": \"juuc\", \"output\": \"[['j', 'u', 'u', 'c'], ['j', 'uu', 'c']]\"}\n{\"input\": \"kkngk\", \"output\": \"[['k', 'k', 'n', 'g', 'k'], ['kk', 'n', 'g', 'k']]\"}\n{\"input\": \"mnlu\", \"output\": \"[['m', 'n', 'l', 'u']]\"}\n{\"input\": \"ghx\", \"output\": \"[['g', 'h', 'x']]\"}\n{\"input\": \"lkqnuxy\", \"output\": \"[['l', 'k', 'q', 'n', 'u', 'x', 'y']]\"}\n{\"input\": \"vjyqirjbeajn\", \"output\": \"[['v', 'j', 'y', 'q', 'i', 'r', 'j', 'b', 'e', 'a', 'j', 'n']]\"}\n{\"input\": \"p\", \"output\": \"[['p']]\"}\n{\"input\": \"kyw\", \"output\": \"[['k', 'y', 'w']]\"}\n{\"input\": \"r\", \"output\": \"[['r']]\"}\n{\"input\": \"raw\", \"output\": \"[['r', 'a', 'w']]\"}\n{\"input\": \"ymjoabrq\", \"output\": \"[['y', 'm', 'j', 'o', 'a', 'b', 'r', 'q']]\"}\n{\"input\": \"iudioxjsnotafwu\", \"output\": \"[['i', 'u', 'd', 'i', 'o', 'x', 'j', 's', 'n', 'o', 't', 'a', 'f', 'w', 'u']]\"}\n{\"input\": \"ejoftll\", \"output\": \"[['e', 'j', 'o', 'f', 't', 'l', 'l'], ['e', 'j', 'o', 'f', 't', 'll']]\"}\n{\"input\": \"xvlbbitxazld\", \"output\": \"[['x', 'v', 'l', 'b', 'b', 'i', 't', 'x', 'a', 'z', 'l', 'd'], ['x', 'v', 'l', 'bb', 'i', 't', 'x', 'a', 'z', 'l', 'd']]\"}\n{\"input\": \"f\", \"output\": \"[['f']]\"}\n{\"input\": \"tyrvaubu\", \"output\": \"[['t', 'y', 'r', 'v', 'a', 'u', 'b', 'u'], ['t', 'y', 'r', 'v', 'a', 'ubu']]\"}\n{\"input\": \"ssrepphg\", \"output\": \"[['s', 's', 'r', 'e', 'p', 'p', 'h', 'g'], ['s', 's', 'r', 'e', 'pp', 'h', 'g'], ['ss', 'r', 'e', 'p', 'p', 'h', 'g'], ['ss', 'r', 'e', 'pp', 'h', 'g']]\"}\n{\"input\": \"azt\", \"output\": \"[['a', 'z', 't']]\"}\n{\"input\": \"nhxjbvygzn\", \"output\": \"[['n', 'h', 'x', 'j', 'b', 'v', 'y', 'g', 'z', 'n']]\"}\n{\"input\": \"mtlrjawfkxootd\", \"output\": \"[['m', 't', 'l', 'r', 'j', 'a', 'w', 'f', 'k', 'x', 'o', 'o', 't', 'd'], ['m', 't', 'l', 'r', 'j', 'a', 'w', 'f', 'k', 'x', 'oo', 't', 'd']]\"}\n{\"input\": \"qjtqpwfp\", \"output\": \"[['q', 'j', 't', 'q', 'p', 'w', 'f', 'p']]\"}\n{\"input\": \"m\", \"output\": \"[['m']]\"}\n{\"input\": \"eijdbujinrt\", \"output\": \"[['e', 'i', 'j', 'd', 'b', 'u', 'j', 'i', 'n', 'r', 't']]\"}\n{\"input\": \"mygvjlbp\", \"output\": \"[['m', 'y', 'g', 'v', 'j', 'l', 'b', 'p']]\"}\n{\"input\": \"ncdpq\", \"output\": \"[['n', 'c', 'd', 'p', 'q']]\"}\n{\"input\": \"stopirvd\", \"output\": \"[['s', 't', 'o', 'p', 'i', 'r', 'v', 'd']]\"}\n{\"input\": \"oyzkeeay\", \"output\": \"[['o', 'y', 'z', 'k', 'e', 'e', 'a', 'y'], ['o', 'y', 'z', 'k', 'ee', 'a', 'y']]\"}\n{\"input\": \"qouc\", \"output\": \"[['q', 'o', 'u', 'c']]\"}\n{\"input\": \"yxdvzwdnlgktja\", \"output\": \"[['y', 'x', 'd', 'v', 'z', 'w', 'd', 'n', 'l', 'g', 'k', 't', 'j', 'a']]\"}\n{\"input\": \"yhgpsxzhtgnna\", \"output\": \"[['y', 'h', 'g', 'p', 's', 'x', 'z', 'h', 't', 'g', 'n', 'n', 'a'], ['y', 'h', 'g', 'p', 's', 'x', 'z', 'h', 't', 'g', 'nn', 'a']]\"}\n{\"input\": \"qvdpamh\", \"output\": \"[['q', 'v', 'd', 'p', 'a', 'm', 'h']]\"}\n{\"input\": \"whrybbzsqjzg\", \"output\": \"[['w', 'h', 'r', 'y', 'b', 'b', 'z', 's', 'q', 'j', 'z', 'g'], ['w', 'h', 'r', 'y', 'bb', 'z', 's', 'q', 'j', 'z', 'g']]\"}\n{\"input\": \"hogiwffcarnz\", \"output\": \"[['h', 'o', 'g', 'i', 'w', 'f', 'f', 'c', 'a', 'r', 'n', 'z'], ['h', 'o', 'g', 'i', 'w', 'ff', 'c', 'a', 'r', 'n', 'z']]\"}\n{\"input\": \"orwyaitmzhyjnwf\", \"output\": \"[['o', 'r', 'w', 'y', 'a', 'i', 't', 'm', 'z', 'h', 'y', 'j', 'n', 'w', 'f']]\"}\n{\"input\": \"iolfho\", \"output\": \"[['i', 'o', 'l', 'f', 'h', 'o']]\"}\n{\"input\": \"unuyvdrvewtjpdzx\", \"output\": \"[['u', 'n', 'u', 'y', 'v', 'd', 'r', 'v', 'e', 'w', 't', 'j', 'p', 'd', 'z', 'x'], ['unu', 'y', 'v', 'd', 'r', 'v', 'e', 'w', 't', 'j', 'p', 'd', 'z', 'x']]\"}\n{\"input\": \"c\", \"output\": \"[['c']]\"}\n{\"input\": \"mqx\", \"output\": \"[['m', 'q', 'x']]\"}\n{\"input\": \"haipfeeylpjrm\", \"output\": \"[['h', 'a', 'i', 'p', 'f', 'e', 'e', 'y', 'l', 'p', 'j', 'r', 'm'], ['h', 'a', 'i', 'p', 'f', 'ee', 'y', 'l', 'p', 'j', 'r', 'm']]\"}\n{\"input\": \"lrnasicsxrrv\", \"output\": \"[['l', 'r', 'n', 'a', 's', 'i', 'c', 's', 'x', 'r', 'r', 'v'], ['l', 'r', 'n', 'a', 's', 'i', 'c', 's', 'x', 'rr', 'v']]\"}\n{\"input\": \"ubxmnthbv\", \"output\": \"[['u', 'b', 'x', 'm', 'n', 't', 'h', 'b', 'v']]\"}\n{\"input\": \"gjjbjlkddki\", \"output\": \"[['g', 'j', 'j', 'b', 'j', 'l', 'k', 'd', 'd', 'k', 'i'], ['g', 'j', 'j', 'b', 'j', 'l', 'k', 'dd', 'k', 'i'], ['g', 'j', 'j', 'b', 'j', 'l', 'kddk', 'i'], ['g', 'j', 'jbj', 'l', 'k', 'd', 'd', 'k', 'i'], ['g', 'j', 'jbj', 'l', 'k', 'dd', 'k', 'i'], ['g', 'j', 'jbj', 'l', 'kddk', 'i'], ['g', 'jj', 'b', 'j', 'l', 'k', 'd', 'd', 'k', 'i'], ['g', 'jj', 'b', 'j', 'l', 'k', 'dd', 'k', 'i'], ['g', 'jj', 'b', 'j', 'l', 'kddk', 'i']]\"}\n{\"input\": \"vhmkjtej\", \"output\": \"[['v', 'h', 'm', 'k', 'j', 't', 'e', 'j']]\"}\n{\"input\": \"rn\", \"output\": \"[['r', 'n']]\"}\n{\"input\": \"zqrcu\", \"output\": \"[['z', 'q', 'r', 'c', 'u']]\"}\n{\"input\": \"mwwlcbghpn\", \"output\": \"[['m', 'w', 'w', 'l', 'c', 'b', 'g', 'h', 'p', 'n'], ['m', 'ww', 'l', 'c', 'b', 'g', 'h', 'p', 'n']]\"}\n{\"input\": \"dtkvaoswvtnwk\", \"output\": \"[['d', 't', 'k', 'v', 'a', 'o', 's', 'w', 'v', 't', 'n', 'w', 'k']]\"}\n{\"input\": \"stbrayupjd\", \"output\": \"[['s', 't', 'b', 'r', 'a', 'y', 'u', 'p', 'j', 'd']]\"}\n{\"input\": \"b\", \"output\": \"[['b']]\"}\n{\"input\": \"aqzlbqotz\", \"output\": \"[['a', 'q', 'z', 'l', 'b', 'q', 'o', 't', 'z']]\"}\n{\"input\": \"eyvisyyljqtl\", \"output\": \"[['e', 'y', 'v', 'i', 's', 'y', 'y', 'l', 'j', 'q', 't', 'l'], ['e', 'y', 'v', 'i', 's', 'yy', 'l', 'j', 'q', 't', 'l']]\"}\n{\"input\": \"hrubjncxxyfefi\", \"output\": \"[['h', 'r', 'u', 'b', 'j', 'n', 'c', 'x', 'x', 'y', 'f', 'e', 'f', 'i'], ['h', 'r', 'u', 'b', 'j', 'n', 'c', 'x', 'x', 'y', 'fef', 'i'], ['h', 'r', 'u', 'b', 'j', 'n', 'c', 'xx', 'y', 'f', 'e', 'f', 'i'], ['h', 'r', 'u', 'b', 'j', 'n', 'c', 'xx', 'y', 'fef', 'i']]\"}\n{\"input\": \"mlucjozkrfweadtv\", \"output\": \"[['m', 'l', 'u', 'c', 'j', 'o', 'z', 'k', 'r', 'f', 'w', 'e', 'a', 'd', 't', 'v']]\"}\n{\"input\": \"wufnksafzvv\", \"output\": \"[['w', 'u', 'f', 'n', 'k', 's', 'a', 'f', 'z', 'v', 'v'], ['w', 'u', 'f', 'n', 'k', 's', 'a', 'f', 'z', 'vv']]\"}\n{\"input\": \"hjhrbxbegbd\", \"output\": \"[['h', 'j', 'h', 'r', 'b', 'x', 'b', 'e', 'g', 'b', 'd'], ['h', 'j', 'h', 'r', 'bxb', 'e', 'g', 'b', 'd'], ['hjh', 'r', 'b', 'x', 'b', 'e', 'g', 'b', 'd'], ['hjh', 'r', 'bxb', 'e', 'g', 'b', 'd']]\"}\n{\"input\": \"twcfytd\", \"output\": \"[['t', 'w', 'c', 'f', 'y', 't', 'd']]\"}\n{\"input\": \"tgjkfz\", \"output\": \"[['t', 'g', 'j', 'k', 'f', 'z']]\"}\n{\"input\": \"zwlpy\", \"output\": \"[['z', 'w', 'l', 'p', 'y']]\"}\n{\"input\": \"tpv\", \"output\": \"[['t', 'p', 'v']]\"}\n{\"input\": \"qoyxcummmo\", \"output\": \"[['q', 'o', 'y', 'x', 'c', 'u', 'm', 'm', 'm', 'o'], ['q', 'o', 'y', 'x', 'c', 'u', 'm', 'mm', 'o'], ['q', 'o', 'y', 'x', 'c', 'u', 'mm', 'm', 'o'], ['q', 'o', 'y', 'x', 'c', 'u', 'mmm', 'o']]\"}\n{\"input\": \"y\", \"output\": \"[['y']]\"}\n{\"input\": \"picpmmegzbjql\", \"output\": \"[['p', 'i', 'c', 'p', 'm', 'm', 'e', 'g', 'z', 'b', 'j', 'q', 'l'], ['p', 'i', 'c', 'p', 'mm', 'e', 'g', 'z', 'b', 'j', 'q', 'l']]\"}\n{\"input\": \"lgophreevsk\", \"output\": \"[['l', 'g', 'o', 'p', 'h', 'r', 'e', 'e', 'v', 's', 'k'], ['l', 'g', 'o', 'p', 'h', 'r', 'ee', 'v', 's', 'k']]\"}\n{\"input\": \"kj\", \"output\": \"[['k', 'j']]\"}\n{\"input\": \"c\", \"output\": \"[['c']]\"}\n{\"input\": \"ddltc\", \"output\": \"[['d', 'd', 'l', 't', 'c'], ['dd', 'l', 't', 'c']]\"}\n{\"input\": \"ntazv\", \"output\": \"[['n', 't', 'a', 'z', 'v']]\"}\n{\"input\": \"cguowunkprjt\", \"output\": \"[['c', 'g', 'u', 'o', 'w', 'u', 'n', 'k', 'p', 'r', 'j', 't']]\"}\n{\"input\": \"owcbiztuwez\", \"output\": \"[['o', 'w', 'c', 'b', 'i', 'z', 't', 'u', 'w', 'e', 'z']]\"}\n{\"input\": \"vwef\", \"output\": \"[['v', 'w', 'e', 'f']]\"}\n{\"input\": \"gypyrnrvet\", \"output\": \"[['g', 'y', 'p', 'y', 'r', 'n', 'r', 'v', 'e', 't'], ['g', 'y', 'p', 'y', 'rnr', 'v', 'e', 't'], ['g', 'ypy', 'r', 'n', 'r', 'v', 'e', 't'], ['g', 'ypy', 'rnr', 'v', 'e', 't']]\"}\n{\"input\": \"xpfmrqou\", \"output\": \"[['x', 'p', 'f', 'm', 'r', 'q', 'o', 'u']]\"}\n{\"input\": \"uwkdfcfkvzq\", \"output\": \"[['u', 'w', 'k', 'd', 'f', 'c', 'f', 'k', 'v', 'z', 'q'], ['u', 'w', 'k', 'd', 'fcf', 'k', 'v', 'z', 'q']]\"}\n{\"input\": \"ycwutohjmqrwz\", \"output\": \"[['y', 'c', 'w', 'u', 't', 'o', 'h', 'j', 'm', 'q', 'r', 'w', 'z']]\"}\n{\"input\": \"wwh\", \"output\": \"[['w', 'w', 'h'], ['ww', 'h']]\"}\n{\"input\": \"gfmeeigzchx\", \"output\": \"[['g', 'f', 'm', 'e', 'e', 'i', 'g', 'z', 'c', 'h', 'x'], ['g', 'f', 'm', 'ee', 'i', 'g', 'z', 'c', 'h', 'x']]\"}\n{\"input\": \"wuzoacphcuuhcj\", \"output\": \"[['w', 'u', 'z', 'o', 'a', 'c', 'p', 'h', 'c', 'u', 'u', 'h', 'c', 'j'], ['w', 'u', 'z', 'o', 'a', 'c', 'p', 'h', 'c', 'uu', 'h', 'c', 'j']]\"}\n{\"input\": \"vvfhbwvvxihc\", \"output\": \"[['v', 'v', 'f', 'h', 'b', 'w', 'v', 'v', 'x', 'i', 'h', 'c'], ['v', 'v', 'f', 'h', 'b', 'w', 'vv', 'x', 'i', 'h', 'c'], ['vv', 'f', 'h', 'b', 'w', 'v', 'v', 'x', 'i', 'h', 'c'], ['vv', 'f', 'h', 'b', 'w', 'vv', 'x', 'i', 'h', 'c']]\"}\n{\"input\": \"zgolgkedadank\", \"output\": \"[['z', 'g', 'o', 'l', 'g', 'k', 'e', 'd', 'a', 'd', 'a', 'n', 'k'], ['z', 'g', 'o', 'l', 'g', 'k', 'e', 'd', 'ada', 'n', 'k'], ['z', 'g', 'o', 'l', 'g', 'k', 'e', 'dad', 'a', 'n', 'k']]\"}\n{\"input\": \"wejhphmduehmd\", \"output\": \"[['w', 'e', 'j', 'h', 'p', 'h', 'm', 'd', 'u', 'e', 'h', 'm', 'd'], ['w', 'e', 'j', 'hph', 'm', 'd', 'u', 'e', 'h', 'm', 'd']]\"}\n{\"input\": \"lppposiwdybzxy\", \"output\": \"[['l', 'p', 'p', 'p', 'o', 's', 'i', 'w', 'd', 'y', 'b', 'z', 'x', 'y'], ['l', 'p', 'pp', 'o', 's', 'i', 'w', 'd', 'y', 'b', 'z', 'x', 'y'], ['l', 'pp', 'p', 'o', 's', 'i', 'w', 'd', 'y', 'b', 'z', 'x', 'y'], ['l', 'ppp', 'o', 's', 'i', 'w', 'd', 'y', 'b', 'z', 'x', 'y']]\"}\n{\"input\": \"werlxj\", \"output\": \"[['w', 'e', 'r', 'l', 'x', 'j']]\"}\n{\"input\": \"ydcfjhtqt\", \"output\": \"[['y', 'd', 'c', 'f', 'j', 'h', 't', 'q', 't'], ['y', 'd', 'c', 'f', 'j', 'h', 'tqt']]\"}\n{\"input\": \"yzpm\", \"output\": \"[['y', 'z', 'p', 'm']]\"}\n{\"input\": \"rjfdbtiimgahytk\", \"output\": \"[['r', 'j', 'f', 'd', 'b', 't', 'i', 'i', 'm', 'g', 'a', 'h', 'y', 't', 'k'], ['r', 'j', 'f', 'd', 'b', 't', 'ii', 'm', 'g', 'a', 'h', 'y', 't', 'k']]\"}\n{\"input\": \"pdwicfkztihyre\", \"output\": \"[['p', 'd', 'w', 'i', 'c', 'f', 'k', 'z', 't', 'i', 'h', 'y', 'r', 'e']]\"}\n{\"input\": \"fmfxcuirobkkhv\", \"output\": \"[['f', 'm', 'f', 'x', 'c', 'u', 'i', 'r', 'o', 'b', 'k', 'k', 'h', 'v'], ['f', 'm', 'f', 'x', 'c', 'u', 'i', 'r', 'o', 'b', 'kk', 'h', 'v'], ['fmf', 'x', 'c', 'u', 'i', 'r', 'o', 'b', 'k', 'k', 'h', 'v'], ['fmf', 'x', 'c', 'u', 'i', 'r', 'o', 'b', 'kk', 'h', 'v']]\"}\n{\"input\": \"nvby\", \"output\": \"[['n', 'v', 'b', 'y']]\"}\n{\"input\": \"lpeji\", \"output\": \"[['l', 'p', 'e', 'j', 'i']]\"}\n{\"input\": \"ss\", \"output\": \"[['s', 's'], ['ss']]\"}\n{\"input\": \"fnbzvgupjv\", \"output\": \"[['f', 'n', 'b', 'z', 'v', 'g', 'u', 'p', 'j', 'v']]\"}\n",
        "test_case_generator":"class TestCaseGenerator:\n    def generate(self) -> dict:\n        import random\n        import string\n        length = random.randint(1, 16)\n        s = ''.join(random.choice(string.ascii_lowercase) for _ in range(length))\n        return {'s': s}\n\n    def encode_input(self, input_obj) -> str:\n        return input_obj['s']\n\n    def encode_output(self, output_obj) -> str:\n        return str(output_obj)\n\n    def decode_input(self, input_str) -> dict:\n        return {'s': input_str}\n",
        "import_code":"from typing import List\nimport random\nimport string",
        "setup_code":"# Define necessary classes and functions\n\nclass Solution:\n    def partition(self, s: str) -> List[List[str]]:\n        memo = {}\n\n        def palindromes(i):\n            palis = []\n            for word_i in range(i, len(s)):\n                sub = s[i:word_i + 1]\n                if sub == sub[::-1]:\n                    palis.append(sub)\n            return palis\n\n        def dfs(i, sub):\n            if i >= len(s):\n                res.append(sub[:])\n                return\n            if i in memo:\n                partitions = memo[i]\n            else:\n                partitions = palindromes(i)\n                memo[i] = partitions\n            for pali in partitions:\n                sub.append(pali)\n                dfs(i + len(pali), sub)\n                sub.pop(-1)\n        \n        res = []\n        dfs(0, [])\n        return res\n\n\nclass TestCaseGenerator:\n    def generate(self) -> dict:\n        length = random.randint(1, 16)\n        s = ''.join(random.choice(string.ascii_lowercase) for _ in range(length))\n        return {'s': s}\n\n    def encode_input(self, input_obj) -> str:\n        return input_obj['s']\n\n    def encode_output(self, output_obj) -> str:\n        return str(output_obj)\n\n    def decode_input(self, input_str) -> dict:\n        return {'s': input_str}",
        "entry_point":"partition"
    },
    {
        "question_id":132,
        "name":"palindrome-partitioning-ii",
        "test_case":"{\"input\": \"{\\\"s\\\": \\\"xmdstsmte\\\"}\", \"output\": \"6\"}\n{\"input\": \"{\\\"s\\\": \\\"scyzhzrmjg\\\"}\", \"output\": \"7\"}\n{\"input\": \"{\\\"s\\\": \\\"rxx\\\"}\", \"output\": \"1\"}\n{\"input\": \"{\\\"s\\\": \\\"tv\\\"}\", \"output\": \"1\"}\n{\"input\": \"{\\\"s\\\": \\\"dqpm\\\"}\", \"output\": \"3\"}\n{\"input\": \"{\\\"s\\\": \\\"mhkvndh\\\"}\", \"output\": \"6\"}\n{\"input\": \"{\\\"s\\\": \\\"zwk\\\"}\", \"output\": \"2\"}\n{\"input\": \"{\\\"s\\\": \\\"dkhvzh\\\"}\", \"output\": \"5\"}\n{\"input\": \"{\\\"s\\\": \\\"fngozf\\\"}\", \"output\": \"5\"}\n{\"input\": \"{\\\"s\\\": \\\"r\\\"}\", \"output\": \"0\"}\n{\"input\": \"{\\\"s\\\": \\\"x\\\"}\", \"output\": \"0\"}\n{\"input\": \"{\\\"s\\\": \\\"xvaqeih\\\"}\", \"output\": \"6\"}\n{\"input\": \"{\\\"s\\\": \\\"nnqc\\\"}\", \"output\": \"2\"}\n{\"input\": \"{\\\"s\\\": \\\"voskhacpzo\\\"}\", \"output\": \"9\"}\n{\"input\": \"{\\\"s\\\": \\\"azrl\\\"}\", \"output\": \"3\"}\n{\"input\": \"{\\\"s\\\": \\\"ryshaf\\\"}\", \"output\": \"5\"}\n{\"input\": \"{\\\"s\\\": \\\"kd\\\"}\", \"output\": \"1\"}\n{\"input\": \"{\\\"s\\\": \\\"ci\\\"}\", \"output\": \"1\"}\n{\"input\": \"{\\\"s\\\": \\\"hsyofpc\\\"}\", \"output\": \"6\"}\n{\"input\": \"{\\\"s\\\": \\\"u\\\"}\", \"output\": \"0\"}\n{\"input\": \"{\\\"s\\\": \\\"xfbq\\\"}\", \"output\": \"3\"}\n{\"input\": \"{\\\"s\\\": \\\"zdhelcs\\\"}\", \"output\": \"6\"}\n{\"input\": \"{\\\"s\\\": \\\"xpxajxdexu\\\"}\", \"output\": \"7\"}\n{\"input\": \"{\\\"s\\\": \\\"dieqwdh\\\"}\", \"output\": \"6\"}\n{\"input\": \"{\\\"s\\\": \\\"jcjcxc\\\"}\", \"output\": \"1\"}\n{\"input\": \"{\\\"s\\\": \\\"dpskj\\\"}\", \"output\": \"4\"}\n{\"input\": \"{\\\"s\\\": \\\"fmimipc\\\"}\", \"output\": \"4\"}\n{\"input\": \"{\\\"s\\\": \\\"e\\\"}\", \"output\": \"0\"}\n{\"input\": \"{\\\"s\\\": \\\"onhp\\\"}\", \"output\": \"3\"}\n{\"input\": \"{\\\"s\\\": \\\"dnqjchb\\\"}\", \"output\": \"6\"}\n{\"input\": \"{\\\"s\\\": \\\"q\\\"}\", \"output\": \"0\"}\n{\"input\": \"{\\\"s\\\": \\\"avzchaad\\\"}\", \"output\": \"6\"}\n{\"input\": \"{\\\"s\\\": \\\"y\\\"}\", \"output\": \"0\"}\n{\"input\": \"{\\\"s\\\": \\\"kbjchekdg\\\"}\", \"output\": \"8\"}\n{\"input\": \"{\\\"s\\\": \\\"ynx\\\"}\", \"output\": \"2\"}\n{\"input\": \"{\\\"s\\\": \\\"nf\\\"}\", \"output\": \"1\"}\n{\"input\": \"{\\\"s\\\": \\\"k\\\"}\", \"output\": \"0\"}\n{\"input\": \"{\\\"s\\\": \\\"w\\\"}\", \"output\": \"0\"}\n{\"input\": \"{\\\"s\\\": \\\"qskujcmoi\\\"}\", \"output\": \"8\"}\n{\"input\": \"{\\\"s\\\": \\\"ddzgfx\\\"}\", \"output\": \"4\"}\n{\"input\": \"{\\\"s\\\": \\\"fvhnoym\\\"}\", \"output\": \"6\"}\n{\"input\": \"{\\\"s\\\": \\\"xfrjo\\\"}\", \"output\": \"4\"}\n{\"input\": \"{\\\"s\\\": \\\"onhdvg\\\"}\", \"output\": \"5\"}\n{\"input\": \"{\\\"s\\\": \\\"uqyrod\\\"}\", \"output\": \"5\"}\n{\"input\": \"{\\\"s\\\": \\\"e\\\"}\", \"output\": \"0\"}\n{\"input\": \"{\\\"s\\\": \\\"luqv\\\"}\", \"output\": \"3\"}\n{\"input\": \"{\\\"s\\\": \\\"enusrmlttu\\\"}\", \"output\": \"8\"}\n{\"input\": \"{\\\"s\\\": \\\"vuy\\\"}\", \"output\": \"2\"}\n{\"input\": \"{\\\"s\\\": \\\"jsy\\\"}\", \"output\": \"2\"}\n{\"input\": \"{\\\"s\\\": \\\"oniakj\\\"}\", \"output\": \"5\"}\n{\"input\": \"{\\\"s\\\": \\\"xrnqo\\\"}\", \"output\": \"4\"}\n{\"input\": \"{\\\"s\\\": \\\"vbs\\\"}\", \"output\": \"2\"}\n{\"input\": \"{\\\"s\\\": \\\"k\\\"}\", \"output\": \"0\"}\n{\"input\": \"{\\\"s\\\": \\\"jgdx\\\"}\", \"output\": \"3\"}\n{\"input\": \"{\\\"s\\\": \\\"oohiqsp\\\"}\", \"output\": \"5\"}\n{\"input\": \"{\\\"s\\\": \\\"nymaiosg\\\"}\", \"output\": \"7\"}\n{\"input\": \"{\\\"s\\\": \\\"v\\\"}\", \"output\": \"0\"}\n{\"input\": \"{\\\"s\\\": \\\"tmctkbniy\\\"}\", \"output\": \"8\"}\n{\"input\": \"{\\\"s\\\": \\\"reiihg\\\"}\", \"output\": \"4\"}\n{\"input\": \"{\\\"s\\\": \\\"ayhbrvwnbf\\\"}\", \"output\": \"9\"}\n{\"input\": \"{\\\"s\\\": \\\"jrvagtutnx\\\"}\", \"output\": \"7\"}\n{\"input\": \"{\\\"s\\\": \\\"guh\\\"}\", \"output\": \"2\"}\n{\"input\": \"{\\\"s\\\": \\\"uswzjiaday\\\"}\", \"output\": \"7\"}\n{\"input\": \"{\\\"s\\\": \\\"rx\\\"}\", \"output\": \"1\"}\n{\"input\": \"{\\\"s\\\": \\\"id\\\"}\", \"output\": \"1\"}\n{\"input\": \"{\\\"s\\\": \\\"yujwdjjyqm\\\"}\", \"output\": \"8\"}\n{\"input\": \"{\\\"s\\\": \\\"wczk\\\"}\", \"output\": \"3\"}\n{\"input\": \"{\\\"s\\\": \\\"qaz\\\"}\", \"output\": \"2\"}\n{\"input\": \"{\\\"s\\\": \\\"iaxpfdmr\\\"}\", \"output\": \"7\"}\n{\"input\": \"{\\\"s\\\": \\\"phektxevl\\\"}\", \"output\": \"8\"}\n{\"input\": \"{\\\"s\\\": \\\"xkzhjb\\\"}\", \"output\": \"5\"}\n{\"input\": \"{\\\"s\\\": \\\"bsprfj\\\"}\", \"output\": \"5\"}\n{\"input\": \"{\\\"s\\\": \\\"kgdaevmf\\\"}\", \"output\": \"7\"}\n{\"input\": \"{\\\"s\\\": \\\"flgtpsir\\\"}\", \"output\": \"7\"}\n{\"input\": \"{\\\"s\\\": \\\"bicxmsufb\\\"}\", \"output\": \"8\"}\n{\"input\": \"{\\\"s\\\": \\\"rgaz\\\"}\", \"output\": \"3\"}\n{\"input\": \"{\\\"s\\\": \\\"l\\\"}\", \"output\": \"0\"}\n{\"input\": \"{\\\"s\\\": \\\"ywd\\\"}\", \"output\": \"2\"}\n{\"input\": \"{\\\"s\\\": \\\"kzqtvsuud\\\"}\", \"output\": \"7\"}\n{\"input\": \"{\\\"s\\\": \\\"fhingnig\\\"}\", \"output\": \"3\"}\n{\"input\": \"{\\\"s\\\": \\\"mp\\\"}\", \"output\": \"1\"}\n{\"input\": \"{\\\"s\\\": \\\"ygnyfnkn\\\"}\", \"output\": \"5\"}\n{\"input\": \"{\\\"s\\\": \\\"lsyqtxpli\\\"}\", \"output\": \"8\"}\n{\"input\": \"{\\\"s\\\": \\\"i\\\"}\", \"output\": \"0\"}\n{\"input\": \"{\\\"s\\\": \\\"zz\\\"}\", \"output\": \"0\"}\n{\"input\": \"{\\\"s\\\": \\\"fn\\\"}\", \"output\": \"1\"}\n{\"input\": \"{\\\"s\\\": \\\"glfh\\\"}\", \"output\": \"3\"}\n{\"input\": \"{\\\"s\\\": \\\"dkenp\\\"}\", \"output\": \"4\"}\n{\"input\": \"{\\\"s\\\": \\\"kexfeox\\\"}\", \"output\": \"6\"}\n{\"input\": \"{\\\"s\\\": \\\"yfxwcy\\\"}\", \"output\": \"5\"}\n{\"input\": \"{\\\"s\\\": \\\"lvoblp\\\"}\", \"output\": \"5\"}\n{\"input\": \"{\\\"s\\\": \\\"lpdyihrdz\\\"}\", \"output\": \"8\"}\n{\"input\": \"{\\\"s\\\": \\\"wjnmfc\\\"}\", \"output\": \"5\"}\n{\"input\": \"{\\\"s\\\": \\\"mdyouai\\\"}\", \"output\": \"6\"}\n{\"input\": \"{\\\"s\\\": \\\"ckjrssp\\\"}\", \"output\": \"5\"}\n{\"input\": \"{\\\"s\\\": \\\"kuakyeec\\\"}\", \"output\": \"6\"}\n{\"input\": \"{\\\"s\\\": \\\"ts\\\"}\", \"output\": \"1\"}\n{\"input\": \"{\\\"s\\\": \\\"livn\\\"}\", \"output\": \"3\"}\n{\"input\": \"{\\\"s\\\": \\\"ypfhjbybse\\\"}\", \"output\": \"7\"}\n{\"input\": \"{\\\"s\\\": \\\"knieipkfow\\\"}\", \"output\": \"7\"}\n{\"input\": \"{\\\"s\\\": \\\"yiiygeqoej\\\"}\", \"output\": \"6\"}\n{\"input\": \"{\\\"s\\\": \\\"wepxtey\\\"}\", \"output\": \"6\"}\n{\"input\": \"{\\\"s\\\": \\\"uthfjv\\\"}\", \"output\": \"5\"}\n{\"input\": \"{\\\"s\\\": \\\"x\\\"}\", \"output\": \"0\"}\n{\"input\": \"{\\\"s\\\": \\\"qxruvf\\\"}\", \"output\": \"5\"}\n{\"input\": \"{\\\"s\\\": \\\"mvnvgw\\\"}\", \"output\": \"3\"}\n{\"input\": \"{\\\"s\\\": \\\"vws\\\"}\", \"output\": \"2\"}\n{\"input\": \"{\\\"s\\\": \\\"ke\\\"}\", \"output\": \"1\"}\n{\"input\": \"{\\\"s\\\": \\\"fv\\\"}\", \"output\": \"1\"}\n{\"input\": \"{\\\"s\\\": \\\"rutnegqlg\\\"}\", \"output\": \"8\"}\n{\"input\": \"{\\\"s\\\": \\\"mdqbpml\\\"}\", \"output\": \"6\"}\n{\"input\": \"{\\\"s\\\": \\\"cgaw\\\"}\", \"output\": \"3\"}\n{\"input\": \"{\\\"s\\\": \\\"chv\\\"}\", \"output\": \"2\"}\n{\"input\": \"{\\\"s\\\": \\\"xykv\\\"}\", \"output\": \"3\"}\n{\"input\": \"{\\\"s\\\": \\\"tvghvaqi\\\"}\", \"output\": \"7\"}\n{\"input\": \"{\\\"s\\\": \\\"ce\\\"}\", \"output\": \"1\"}\n{\"input\": \"{\\\"s\\\": \\\"v\\\"}\", \"output\": \"0\"}\n{\"input\": \"{\\\"s\\\": \\\"vukobr\\\"}\", \"output\": \"5\"}\n{\"input\": \"{\\\"s\\\": \\\"rcdaw\\\"}\", \"output\": \"4\"}\n{\"input\": \"{\\\"s\\\": \\\"qnutssm\\\"}\", \"output\": \"5\"}\n{\"input\": \"{\\\"s\\\": \\\"hdvftzs\\\"}\", \"output\": \"6\"}\n{\"input\": \"{\\\"s\\\": \\\"at\\\"}\", \"output\": \"1\"}\n{\"input\": \"{\\\"s\\\": \\\"icxraaffkr\\\"}\", \"output\": \"7\"}\n{\"input\": \"{\\\"s\\\": \\\"iejlylu\\\"}\", \"output\": \"4\"}\n{\"input\": \"{\\\"s\\\": \\\"m\\\"}\", \"output\": \"0\"}\n{\"input\": \"{\\\"s\\\": \\\"aipgowoc\\\"}\", \"output\": \"5\"}\n{\"input\": \"{\\\"s\\\": \\\"riwnvtdoxn\\\"}\", \"output\": \"9\"}\n{\"input\": \"{\\\"s\\\": \\\"x\\\"}\", \"output\": \"0\"}\n",
        "test_case_generator":"class TestCaseGenerator:\n    def generate(self) -> dict:\n        \"\"\"\n        Generates a test case input containing a random string `s` of length between 1 and 10.\n        This ensures we have a reasonable range for testing without excessive computation time.\n        \"\"\"\n        import random\n        \n        # Define the string length range\n        min_length = 1\n        max_length = 10\n        \n        # Create a random lowercase alphabetic string\n        length = random.randint(min_length, max_length)\n        s = ''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=length))\n        \n        return {'s': s}\n\n    def encode_input(self, input_obj) -> str:\n        \"\"\"\n        Encodes the test case input into a JSON string.\n        \"\"\"\n        import json\n        return json.dumps(input_obj)\n\n    def encode_output(self, output_obj) -> str:\n        \"\"\"\n        Encodes the test case output, which is an integer, to a string.\n        \"\"\"\n        return str(output_obj)\n\n    def decode_input(self, input_str) -> dict:\n        \"\"\"\n        Decodes a JSON string into a dictionary representing the test case input.\n        \"\"\"\n        import json\n        return json.loads(input_str)\n",
        "import_code":"import random\nimport json",
        "setup_code":"class Solution:\n    def minCut(self, s: str) -> int:\n        n = len(s)\n        memo_c = [None] * n\n        memo_p = [[None] * n for _ in range(n)]\n        \n        def helper(start, end):\n            cut = end\n            if start == end or is_p(start, end):\n                return 0\n            if memo_c[start] is not None:\n                return memo_c[start]\n            for i in range(start, end + 1):\n                if is_p(start, i):\n                    cut = min(cut, 1 + helper(i + 1, end))\n            \n            memo_c[start] = cut\n            return cut\n\n        def is_p(start, end):\n            if start >= end:\n                return True\n            if memo_p[start][end] is not None:\n                return memo_p[start][end]\n            memo_p[start][end] = (s[start] == s[end] and is_p(start + 1, end - 1))\n            return memo_p[start][end]\n\n        return helper(0, n - 1)\n\nclass TestCaseGenerator:\n    def generate(self) -> dict:\n        \"\"\"\n        Generates a test case input containing a random string `s` of length between 1 and 10.\n        This ensures we have a reasonable range for testing without excessive computation time.\n        \"\"\"\n        # Define the string length range\n        min_length = 1\n        max_length = 10\n        \n        # Create a random lowercase alphabetic string\n        length = random.randint(min_length, max_length)\n        s = ''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=length))\n        \n        return {'s': s}\n\n    def encode_input(self, input_obj) -> str:\n        \"\"\"\n        Encodes the test case input into a JSON string.\n        \"\"\"\n        return json.dumps(input_obj)\n\n    def encode_output(self, output_obj) -> str:\n        \"\"\"\n        Encodes the test case output, which is an integer, to a string.\n        \"\"\"\n        return str(output_obj)\n\n    def decode_input(self, input_str) -> dict:\n        \"\"\"\n        Decodes a JSON string into a dictionary representing the test case input.\n        \"\"\"\n        return json.loads(input_str)",
        "entry_point":"minCut"
    },
    {
        "question_id":135,
        "name":"candy",
        "test_case":"{\"input\": \"{'ratings': [1, 2, 2]}\", \"output\": \"4\"}\n{\"input\": \"{'ratings': [1, 2, 2]}\", \"output\": \"4\"}\n{\"input\": \"{'ratings': [1, 2, 2]}\", \"output\": \"4\"}\n{\"input\": \"{'ratings': [1, 2, 87, 87, 87, 2, 1]}\", \"output\": \"13\"}\n{\"input\": \"{'ratings': [1, 0, 2]}\", \"output\": \"5\"}\n{\"input\": \"{'ratings': [1, 2, 87, 87, 87, 2, 1]}\", \"output\": \"13\"}\n{\"input\": \"{'ratings': [1, 2, 87, 87, 87, 2, 1]}\", \"output\": \"13\"}\n{\"input\": \"{'ratings': [3, 2, 1]}\", \"output\": \"6\"}\n{\"input\": \"{'ratings': [1, 2, 2]}\", \"output\": \"4\"}\n{\"input\": \"{'ratings': [1, 2, 87, 87, 87, 2, 1]}\", \"output\": \"13\"}\n{\"input\": \"{'ratings': [1, 3, 4, 5, 2]}\", \"output\": \"11\"}\n{\"input\": \"{'ratings': [1, 2, 87, 87, 87, 2, 1]}\", \"output\": \"13\"}\n{\"input\": \"{'ratings': [1, 2, 2]}\", \"output\": \"4\"}\n{\"input\": \"{'ratings': [3, 2, 1]}\", \"output\": \"6\"}\n{\"input\": \"{'ratings': [1, 2, 2]}\", \"output\": \"4\"}\n{\"input\": \"{'ratings': [1, 2, 2]}\", \"output\": \"4\"}\n{\"input\": \"{'ratings': [1, 2, 87, 87, 87, 2, 1]}\", \"output\": \"13\"}\n{\"input\": \"{'ratings': [1, 3, 4, 5, 2]}\", \"output\": \"11\"}\n{\"input\": \"{'ratings': [3, 2, 1]}\", \"output\": \"6\"}\n{\"input\": \"{'ratings': [1, 3, 4, 5, 2]}\", \"output\": \"11\"}\n{\"input\": \"{'ratings': [1, 3, 4, 5, 2]}\", \"output\": \"11\"}\n{\"input\": \"{'ratings': [3, 2, 1]}\", \"output\": \"6\"}\n{\"input\": \"{'ratings': [3, 2, 1]}\", \"output\": \"6\"}\n{\"input\": \"{'ratings': [1, 0, 2]}\", \"output\": \"5\"}\n{\"input\": \"{'ratings': [1, 2, 87, 87, 87, 2, 1]}\", \"output\": \"13\"}\n{\"input\": \"{'ratings': [3, 2, 1]}\", \"output\": \"6\"}\n{\"input\": \"{'ratings': [1, 2, 87, 87, 87, 2, 1]}\", \"output\": \"13\"}\n{\"input\": \"{'ratings': [1, 3, 4, 5, 2]}\", \"output\": \"11\"}\n{\"input\": \"{'ratings': [1, 3, 4, 5, 2]}\", \"output\": \"11\"}\n{\"input\": \"{'ratings': [3, 2, 1]}\", \"output\": \"6\"}\n{\"input\": \"{'ratings': [1, 3, 4, 5, 2]}\", \"output\": \"11\"}\n{\"input\": \"{'ratings': [1, 2, 2]}\", \"output\": \"4\"}\n{\"input\": \"{'ratings': [1, 3, 4, 5, 2]}\", \"output\": \"11\"}\n{\"input\": \"{'ratings': [1, 0, 2]}\", \"output\": \"5\"}\n{\"input\": \"{'ratings': [1, 2, 2]}\", \"output\": \"4\"}\n{\"input\": \"{'ratings': [1, 3, 4, 5, 2]}\", \"output\": \"11\"}\n{\"input\": \"{'ratings': [1, 2, 87, 87, 87, 2, 1]}\", \"output\": \"13\"}\n{\"input\": \"{'ratings': [3, 2, 1]}\", \"output\": \"6\"}\n{\"input\": \"{'ratings': [1, 0, 2]}\", \"output\": \"5\"}\n{\"input\": \"{'ratings': [1, 2, 87, 87, 87, 2, 1]}\", \"output\": \"13\"}\n{\"input\": \"{'ratings': [3, 2, 1]}\", \"output\": \"6\"}\n{\"input\": \"{'ratings': [1, 0, 2]}\", \"output\": \"5\"}\n{\"input\": \"{'ratings': [1, 0, 2]}\", \"output\": \"5\"}\n{\"input\": \"{'ratings': [1, 2, 87, 87, 87, 2, 1]}\", \"output\": \"13\"}\n{\"input\": \"{'ratings': [1, 0, 2]}\", \"output\": \"5\"}\n{\"input\": \"{'ratings': [1, 3, 4, 5, 2]}\", \"output\": \"11\"}\n{\"input\": \"{'ratings': [1, 0, 2]}\", \"output\": \"5\"}\n{\"input\": \"{'ratings': [1, 2, 87, 87, 87, 2, 1]}\", \"output\": \"13\"}\n{\"input\": \"{'ratings': [1, 2, 2]}\", \"output\": \"4\"}\n{\"input\": \"{'ratings': [1, 2, 2]}\", \"output\": \"4\"}\n{\"input\": \"{'ratings': [3, 2, 1]}\", \"output\": \"6\"}\n{\"input\": \"{'ratings': [1, 2, 2]}\", \"output\": \"4\"}\n{\"input\": \"{'ratings': [1, 3, 4, 5, 2]}\", \"output\": \"11\"}\n{\"input\": \"{'ratings': [3, 2, 1]}\", \"output\": \"6\"}\n{\"input\": \"{'ratings': [3, 2, 1]}\", \"output\": \"6\"}\n{\"input\": \"{'ratings': [1, 2, 87, 87, 87, 2, 1]}\", \"output\": \"13\"}\n{\"input\": \"{'ratings': [1, 0, 2]}\", \"output\": \"5\"}\n{\"input\": \"{'ratings': [1, 2, 2]}\", \"output\": \"4\"}\n{\"input\": \"{'ratings': [1, 2, 2]}\", \"output\": \"4\"}\n{\"input\": \"{'ratings': [1, 0, 2]}\", \"output\": \"5\"}\n{\"input\": \"{'ratings': [3, 2, 1]}\", \"output\": \"6\"}\n{\"input\": \"{'ratings': [3, 2, 1]}\", \"output\": \"6\"}\n{\"input\": \"{'ratings': [1, 2, 87, 87, 87, 2, 1]}\", \"output\": \"13\"}\n{\"input\": \"{'ratings': [1, 3, 4, 5, 2]}\", \"output\": \"11\"}\n{\"input\": \"{'ratings': [1, 2, 87, 87, 87, 2, 1]}\", \"output\": \"13\"}\n{\"input\": \"{'ratings': [3, 2, 1]}\", \"output\": \"6\"}\n{\"input\": \"{'ratings': [1, 3, 4, 5, 2]}\", \"output\": \"11\"}\n{\"input\": \"{'ratings': [1, 2, 2]}\", \"output\": \"4\"}\n{\"input\": \"{'ratings': [3, 2, 1]}\", \"output\": \"6\"}\n{\"input\": \"{'ratings': [1, 0, 2]}\", \"output\": \"5\"}\n{\"input\": \"{'ratings': [1, 0, 2]}\", \"output\": \"5\"}\n{\"input\": \"{'ratings': [1, 3, 4, 5, 2]}\", \"output\": \"11\"}\n{\"input\": \"{'ratings': [1, 2, 2]}\", \"output\": \"4\"}\n{\"input\": \"{'ratings': [1, 0, 2]}\", \"output\": \"5\"}\n{\"input\": \"{'ratings': [1, 2, 2]}\", \"output\": \"4\"}\n{\"input\": \"{'ratings': [3, 2, 1]}\", \"output\": \"6\"}\n{\"input\": \"{'ratings': [1, 0, 2]}\", \"output\": \"5\"}\n{\"input\": \"{'ratings': [1, 0, 2]}\", \"output\": \"5\"}\n{\"input\": \"{'ratings': [1, 2, 2]}\", \"output\": \"4\"}\n{\"input\": \"{'ratings': [1, 2, 2]}\", \"output\": \"4\"}\n{\"input\": \"{'ratings': [1, 2, 87, 87, 87, 2, 1]}\", \"output\": \"13\"}\n{\"input\": \"{'ratings': [1, 2, 2]}\", \"output\": \"4\"}\n{\"input\": \"{'ratings': [3, 2, 1]}\", \"output\": \"6\"}\n{\"input\": \"{'ratings': [1, 2, 87, 87, 87, 2, 1]}\", \"output\": \"13\"}\n{\"input\": \"{'ratings': [1, 3, 4, 5, 2]}\", \"output\": \"11\"}\n{\"input\": \"{'ratings': [1, 0, 2]}\", \"output\": \"5\"}\n{\"input\": \"{'ratings': [3, 2, 1]}\", \"output\": \"6\"}\n{\"input\": \"{'ratings': [1, 2, 2]}\", \"output\": \"4\"}\n{\"input\": \"{'ratings': [1, 0, 2]}\", \"output\": \"5\"}\n{\"input\": \"{'ratings': [3, 2, 1]}\", \"output\": \"6\"}\n{\"input\": \"{'ratings': [1, 3, 4, 5, 2]}\", \"output\": \"11\"}\n{\"input\": \"{'ratings': [1, 2, 2]}\", \"output\": \"4\"}\n{\"input\": \"{'ratings': [1, 0, 2]}\", \"output\": \"5\"}\n{\"input\": \"{'ratings': [1, 2, 2]}\", \"output\": \"4\"}\n{\"input\": \"{'ratings': [1, 0, 2]}\", \"output\": \"5\"}\n{\"input\": \"{'ratings': [1, 3, 4, 5, 2]}\", \"output\": \"11\"}\n{\"input\": \"{'ratings': [1, 0, 2]}\", \"output\": \"5\"}\n{\"input\": \"{'ratings': [1, 2, 2]}\", \"output\": \"4\"}\n{\"input\": \"{'ratings': [1, 2, 2]}\", \"output\": \"4\"}\n{\"input\": \"{'ratings': [3, 2, 1]}\", \"output\": \"6\"}\n{\"input\": \"{'ratings': [1, 3, 4, 5, 2]}\", \"output\": \"11\"}\n{\"input\": \"{'ratings': [1, 2, 2]}\", \"output\": \"4\"}\n{\"input\": \"{'ratings': [1, 0, 2]}\", \"output\": \"5\"}\n{\"input\": \"{'ratings': [3, 2, 1]}\", \"output\": \"6\"}\n{\"input\": \"{'ratings': [1, 3, 4, 5, 2]}\", \"output\": \"11\"}\n{\"input\": \"{'ratings': [3, 2, 1]}\", \"output\": \"6\"}\n{\"input\": \"{'ratings': [1, 2, 2]}\", \"output\": \"4\"}\n{\"input\": \"{'ratings': [3, 2, 1]}\", \"output\": \"6\"}\n{\"input\": \"{'ratings': [1, 3, 4, 5, 2]}\", \"output\": \"11\"}\n{\"input\": \"{'ratings': [1, 2, 87, 87, 87, 2, 1]}\", \"output\": \"13\"}\n{\"input\": \"{'ratings': [1, 0, 2]}\", \"output\": \"5\"}\n{\"input\": \"{'ratings': [3, 2, 1]}\", \"output\": \"6\"}\n{\"input\": \"{'ratings': [1, 2, 87, 87, 87, 2, 1]}\", \"output\": \"13\"}\n{\"input\": \"{'ratings': [1, 2, 87, 87, 87, 2, 1]}\", \"output\": \"13\"}\n{\"input\": \"{'ratings': [1, 2, 87, 87, 87, 2, 1]}\", \"output\": \"13\"}\n{\"input\": \"{'ratings': [1, 0, 2]}\", \"output\": \"5\"}\n{\"input\": \"{'ratings': [1, 2, 87, 87, 87, 2, 1]}\", \"output\": \"13\"}\n{\"input\": \"{'ratings': [3, 2, 1]}\", \"output\": \"6\"}\n{\"input\": \"{'ratings': [1, 2, 87, 87, 87, 2, 1]}\", \"output\": \"13\"}\n{\"input\": \"{'ratings': [1, 2, 2]}\", \"output\": \"4\"}\n{\"input\": \"{'ratings': [1, 2, 87, 87, 87, 2, 1]}\", \"output\": \"13\"}\n{\"input\": \"{'ratings': [1, 0, 2]}\", \"output\": \"5\"}\n{\"input\": \"{'ratings': [3, 2, 1]}\", \"output\": \"6\"}\n{\"input\": \"{'ratings': [1, 2, 87, 87, 87, 2, 1]}\", \"output\": \"13\"}\n{\"input\": \"{'ratings': [1, 2, 2]}\", \"output\": \"4\"}\n{\"input\": \"{'ratings': [1, 2, 2]}\", \"output\": \"4\"}\n{\"input\": \"{'ratings': [1, 2, 2]}\", \"output\": \"4\"}\n{\"input\": \"{'ratings': [1, 3, 4, 5, 2]}\", \"output\": \"11\"}\n",
        "test_case_generator":"class TestCaseGenerator:\n    def generate(self) -> dict:\n        # Example Test Case\n        test_case_1 = {'ratings': [1, 0, 2]}\n        test_case_2 = {'ratings': [1, 2, 2]}\n        # Additional Test Cases\n        test_case_3 = {'ratings': [3, 2, 1]}\n        test_case_4 = {'ratings': [1, 3, 4, 5, 2]}\n        test_case_5 = {'ratings': [1, 2, 87, 87, 87, 2, 1]}\n        return random.choice([test_case_1, test_case_2, test_case_3, test_case_4, test_case_5])\n\n    def encode_input(self, input_obj) -> str:\n        return str(input_obj)\n\n    def encode_output(self, output_obj) -> str:\n        return str(output_obj)\n\n    def decode_input(self, input_str) -> dict:\n        return eval(input_str)",
        "import_code":"from typing import List\nimport random",
        "setup_code":"# Define necessary data structures\nclass Solution:\n    def candy(self, ratings: List[int]) -> int:\n        return Solution().compute_candy(ratings)\n\n    def compute_candy(self, ratings: List[int]) -> int:\n        n = len(ratings)\n        left = [1] * n\n        right = [1] * n\n        for i in range(1, n):\n            if ratings[i] > ratings[i - 1]:\n                left[i] = left[i - 1] + 1\n            else:\n                left[i] = 1\n\n        for i in range(n - 2, -1, -1):\n            if ratings[i] > ratings[i + 1]:\n                right[i] = right[i + 1] + 1\n            else:\n                right[i] = 1\n\n        ans = 0\n        for i in range(n):\n            ans += max(left[i], right[i])\n        return ans\n\n# Test case generator\nclass TestCaseGenerator:\n    def generate(self) -> dict:\n        # Example Test Case\n        test_case_1 = {'ratings': [1, 0, 2]}\n        test_case_2 = {'ratings': [1, 2, 2]}\n        # Additional Test Cases\n        test_case_3 = {'ratings': [3, 2, 1]}\n        test_case_4 = {'ratings': [1, 3, 4, 5, 2]}\n        test_case_5 = {'ratings': [1, 2, 87, 87, 87, 2, 1]}\n        return random.choice([test_case_1, test_case_2, test_case_3, test_case_4, test_case_5])\n\n    def encode_input(self, input_obj) -> str:\n        return str(input_obj)\n\n    def encode_output(self, output_obj) -> str:\n        return str(output_obj)\n\n    def decode_input(self, input_str) -> dict:\n        return eval(input_str)",
        "entry_point":"candy"
    },
    {
        "question_id":140,
        "name":"word-break-ii",
        "test_case":"{\"input\": \"catsanddog|cat|cats|and|sand|dog\", \"output\": \"cat sand dog|cats and dog\"}\n{\"input\": \"catsanddog|cat|cats|and|sand|dog\", \"output\": \"cat sand dog|cats and dog\"}\n{\"input\": \"catsanddog|cat|cats|and|sand|dog\", \"output\": \"cat sand dog|cats and dog\"}\n{\"input\": \"catsanddog|cat|cats|and|sand|dog\", \"output\": \"cat sand dog|cats and dog\"}\n{\"input\": \"catsandog|cats|dog|sand|and|cat\", \"output\": \"\"}\n{\"input\": \"catsandog|cats|dog|sand|and|cat\", \"output\": \"\"}\n{\"input\": \"catsandog|cats|dog|sand|and|cat\", \"output\": \"\"}\n{\"input\": \"catsanddog|cat|cats|and|sand|dog\", \"output\": \"cat sand dog|cats and dog\"}\n{\"input\": \"catsandog|cats|dog|sand|and|cat\", \"output\": \"\"}\n{\"input\": \"catsanddog|cat|cats|and|sand|dog\", \"output\": \"cat sand dog|cats and dog\"}\n{\"input\": \"catsandog|cats|dog|sand|and|cat\", \"output\": \"\"}\n{\"input\": \"catsandog|cats|dog|sand|and|cat\", \"output\": \"\"}\n{\"input\": \"catsandog|cats|dog|sand|and|cat\", \"output\": \"\"}\n{\"input\": \"catsandog|cats|dog|sand|and|cat\", \"output\": \"\"}\n{\"input\": \"catsanddog|cat|cats|and|sand|dog\", \"output\": \"cat sand dog|cats and dog\"}\n{\"input\": \"catsanddog|cat|cats|and|sand|dog\", \"output\": \"cat sand dog|cats and dog\"}\n{\"input\": \"catsandog|cats|dog|sand|and|cat\", \"output\": \"\"}\n{\"input\": \"pineapplepenapple|apple|pen|applepen|pine|pineapple\", \"output\": \"pine apple pen apple|pine applepen apple|pineapple pen apple\"}\n{\"input\": \"catsanddog|cat|cats|and|sand|dog\", \"output\": \"cat sand dog|cats and dog\"}\n{\"input\": \"pineapplepenapple|apple|pen|applepen|pine|pineapple\", \"output\": \"pine apple pen apple|pine applepen apple|pineapple pen apple\"}\n{\"input\": \"catsandog|cats|dog|sand|and|cat\", \"output\": \"\"}\n{\"input\": \"catsanddog|cat|cats|and|sand|dog\", \"output\": \"cat sand dog|cats and dog\"}\n{\"input\": \"catsandog|cats|dog|sand|and|cat\", \"output\": \"\"}\n{\"input\": \"catsanddog|cat|cats|and|sand|dog\", \"output\": \"cat sand dog|cats and dog\"}\n{\"input\": \"catsanddog|cat|cats|and|sand|dog\", \"output\": \"cat sand dog|cats and dog\"}\n{\"input\": \"catsandog|cats|dog|sand|and|cat\", \"output\": \"\"}\n{\"input\": \"catsandog|cats|dog|sand|and|cat\", \"output\": \"\"}\n{\"input\": \"catsanddog|cat|cats|and|sand|dog\", \"output\": \"cat sand dog|cats and dog\"}\n{\"input\": \"catsandog|cats|dog|sand|and|cat\", \"output\": \"\"}\n{\"input\": \"catsandog|cats|dog|sand|and|cat\", \"output\": \"\"}\n{\"input\": \"catsanddog|cat|cats|and|sand|dog\", \"output\": \"cat sand dog|cats and dog\"}\n{\"input\": \"pineapplepenapple|apple|pen|applepen|pine|pineapple\", \"output\": \"pine apple pen apple|pine applepen apple|pineapple pen apple\"}\n{\"input\": \"pineapplepenapple|apple|pen|applepen|pine|pineapple\", \"output\": \"pine apple pen apple|pine applepen apple|pineapple pen apple\"}\n{\"input\": \"catsandog|cats|dog|sand|and|cat\", \"output\": \"\"}\n{\"input\": \"catsanddog|cat|cats|and|sand|dog\", \"output\": \"cat sand dog|cats and dog\"}\n{\"input\": \"catsandog|cats|dog|sand|and|cat\", \"output\": \"\"}\n{\"input\": \"catsanddog|cat|cats|and|sand|dog\", \"output\": \"cat sand dog|cats and dog\"}\n{\"input\": \"catsanddog|cat|cats|and|sand|dog\", \"output\": \"cat sand dog|cats and dog\"}\n{\"input\": \"catsanddog|cat|cats|and|sand|dog\", \"output\": \"cat sand dog|cats and dog\"}\n{\"input\": \"catsandog|cats|dog|sand|and|cat\", \"output\": \"\"}\n{\"input\": \"catsanddog|cat|cats|and|sand|dog\", \"output\": \"cat sand dog|cats and dog\"}\n{\"input\": \"catsandog|cats|dog|sand|and|cat\", \"output\": \"\"}\n{\"input\": \"pineapplepenapple|apple|pen|applepen|pine|pineapple\", \"output\": \"pine apple pen apple|pine applepen apple|pineapple pen apple\"}\n{\"input\": \"catsandog|cats|dog|sand|and|cat\", \"output\": \"\"}\n{\"input\": \"catsanddog|cat|cats|and|sand|dog\", \"output\": \"cat sand dog|cats and dog\"}\n{\"input\": \"pineapplepenapple|apple|pen|applepen|pine|pineapple\", \"output\": \"pine apple pen apple|pine applepen apple|pineapple pen apple\"}\n{\"input\": \"catsandog|cats|dog|sand|and|cat\", \"output\": \"\"}\n{\"input\": \"catsanddog|cat|cats|and|sand|dog\", \"output\": \"cat sand dog|cats and dog\"}\n{\"input\": \"catsandog|cats|dog|sand|and|cat\", \"output\": \"\"}\n{\"input\": \"pineapplepenapple|apple|pen|applepen|pine|pineapple\", \"output\": \"pine apple pen apple|pine applepen apple|pineapple pen apple\"}\n{\"input\": \"catsanddog|cat|cats|and|sand|dog\", \"output\": \"cat sand dog|cats and dog\"}\n{\"input\": \"pineapplepenapple|apple|pen|applepen|pine|pineapple\", \"output\": \"pine apple pen apple|pine applepen apple|pineapple pen apple\"}\n{\"input\": \"catsandog|cats|dog|sand|and|cat\", \"output\": \"\"}\n{\"input\": \"catsanddog|cat|cats|and|sand|dog\", \"output\": \"cat sand dog|cats and dog\"}\n{\"input\": \"catsanddog|cat|cats|and|sand|dog\", \"output\": \"cat sand dog|cats and dog\"}\n{\"input\": \"catsandog|cats|dog|sand|and|cat\", \"output\": \"\"}\n{\"input\": \"catsandog|cats|dog|sand|and|cat\", \"output\": \"\"}\n{\"input\": \"pineapplepenapple|apple|pen|applepen|pine|pineapple\", \"output\": \"pine apple pen apple|pine applepen apple|pineapple pen apple\"}\n{\"input\": \"catsandog|cats|dog|sand|and|cat\", \"output\": \"\"}\n{\"input\": \"catsanddog|cat|cats|and|sand|dog\", \"output\": \"cat sand dog|cats and dog\"}\n{\"input\": \"pineapplepenapple|apple|pen|applepen|pine|pineapple\", \"output\": \"pine apple pen apple|pine applepen apple|pineapple pen apple\"}\n{\"input\": \"catsandog|cats|dog|sand|and|cat\", \"output\": \"\"}\n{\"input\": \"pineapplepenapple|apple|pen|applepen|pine|pineapple\", \"output\": \"pine apple pen apple|pine applepen apple|pineapple pen apple\"}\n{\"input\": \"pineapplepenapple|apple|pen|applepen|pine|pineapple\", \"output\": \"pine apple pen apple|pine applepen apple|pineapple pen apple\"}\n{\"input\": \"catsandog|cats|dog|sand|and|cat\", \"output\": \"\"}\n{\"input\": \"catsanddog|cat|cats|and|sand|dog\", \"output\": \"cat sand dog|cats and dog\"}\n{\"input\": \"catsandog|cats|dog|sand|and|cat\", \"output\": \"\"}\n{\"input\": \"pineapplepenapple|apple|pen|applepen|pine|pineapple\", \"output\": \"pine apple pen apple|pine applepen apple|pineapple pen apple\"}\n{\"input\": \"pineapplepenapple|apple|pen|applepen|pine|pineapple\", \"output\": \"pine apple pen apple|pine applepen apple|pineapple pen apple\"}\n{\"input\": \"pineapplepenapple|apple|pen|applepen|pine|pineapple\", \"output\": \"pine apple pen apple|pine applepen apple|pineapple pen apple\"}\n{\"input\": \"catsanddog|cat|cats|and|sand|dog\", \"output\": \"cat sand dog|cats and dog\"}\n{\"input\": \"pineapplepenapple|apple|pen|applepen|pine|pineapple\", \"output\": \"pine apple pen apple|pine applepen apple|pineapple pen apple\"}\n{\"input\": \"catsanddog|cat|cats|and|sand|dog\", \"output\": \"cat sand dog|cats and dog\"}\n{\"input\": \"catsandog|cats|dog|sand|and|cat\", \"output\": \"\"}\n{\"input\": \"catsanddog|cat|cats|and|sand|dog\", \"output\": \"cat sand dog|cats and dog\"}\n{\"input\": \"pineapplepenapple|apple|pen|applepen|pine|pineapple\", \"output\": \"pine apple pen apple|pine applepen apple|pineapple pen apple\"}\n{\"input\": \"catsanddog|cat|cats|and|sand|dog\", \"output\": \"cat sand dog|cats and dog\"}\n{\"input\": \"catsanddog|cat|cats|and|sand|dog\", \"output\": \"cat sand dog|cats and dog\"}\n{\"input\": \"pineapplepenapple|apple|pen|applepen|pine|pineapple\", \"output\": \"pine apple pen apple|pine applepen apple|pineapple pen apple\"}\n{\"input\": \"pineapplepenapple|apple|pen|applepen|pine|pineapple\", \"output\": \"pine apple pen apple|pine applepen apple|pineapple pen apple\"}\n{\"input\": \"pineapplepenapple|apple|pen|applepen|pine|pineapple\", \"output\": \"pine apple pen apple|pine applepen apple|pineapple pen apple\"}\n{\"input\": \"catsandog|cats|dog|sand|and|cat\", \"output\": \"\"}\n{\"input\": \"pineapplepenapple|apple|pen|applepen|pine|pineapple\", \"output\": \"pine apple pen apple|pine applepen apple|pineapple pen apple\"}\n{\"input\": \"pineapplepenapple|apple|pen|applepen|pine|pineapple\", \"output\": \"pine apple pen apple|pine applepen apple|pineapple pen apple\"}\n{\"input\": \"pineapplepenapple|apple|pen|applepen|pine|pineapple\", \"output\": \"pine apple pen apple|pine applepen apple|pineapple pen apple\"}\n{\"input\": \"catsandog|cats|dog|sand|and|cat\", \"output\": \"\"}\n{\"input\": \"pineapplepenapple|apple|pen|applepen|pine|pineapple\", \"output\": \"pine apple pen apple|pine applepen apple|pineapple pen apple\"}\n{\"input\": \"catsanddog|cat|cats|and|sand|dog\", \"output\": \"cat sand dog|cats and dog\"}\n{\"input\": \"catsanddog|cat|cats|and|sand|dog\", \"output\": \"cat sand dog|cats and dog\"}\n{\"input\": \"pineapplepenapple|apple|pen|applepen|pine|pineapple\", \"output\": \"pine apple pen apple|pine applepen apple|pineapple pen apple\"}\n{\"input\": \"catsanddog|cat|cats|and|sand|dog\", \"output\": \"cat sand dog|cats and dog\"}\n{\"input\": \"catsanddog|cat|cats|and|sand|dog\", \"output\": \"cat sand dog|cats and dog\"}\n{\"input\": \"catsanddog|cat|cats|and|sand|dog\", \"output\": \"cat sand dog|cats and dog\"}\n{\"input\": \"pineapplepenapple|apple|pen|applepen|pine|pineapple\", \"output\": \"pine apple pen apple|pine applepen apple|pineapple pen apple\"}\n{\"input\": \"pineapplepenapple|apple|pen|applepen|pine|pineapple\", \"output\": \"pine apple pen apple|pine applepen apple|pineapple pen apple\"}\n{\"input\": \"catsanddog|cat|cats|and|sand|dog\", \"output\": \"cat sand dog|cats and dog\"}\n{\"input\": \"pineapplepenapple|apple|pen|applepen|pine|pineapple\", \"output\": \"pine apple pen apple|pine applepen apple|pineapple pen apple\"}\n{\"input\": \"catsandog|cats|dog|sand|and|cat\", \"output\": \"\"}\n{\"input\": \"pineapplepenapple|apple|pen|applepen|pine|pineapple\", \"output\": \"pine apple pen apple|pine applepen apple|pineapple pen apple\"}\n{\"input\": \"catsandog|cats|dog|sand|and|cat\", \"output\": \"\"}\n{\"input\": \"catsandog|cats|dog|sand|and|cat\", \"output\": \"\"}\n{\"input\": \"catsandog|cats|dog|sand|and|cat\", \"output\": \"\"}\n{\"input\": \"catsandog|cats|dog|sand|and|cat\", \"output\": \"\"}\n{\"input\": \"catsanddog|cat|cats|and|sand|dog\", \"output\": \"cat sand dog|cats and dog\"}\n{\"input\": \"catsandog|cats|dog|sand|and|cat\", \"output\": \"\"}\n{\"input\": \"catsandog|cats|dog|sand|and|cat\", \"output\": \"\"}\n{\"input\": \"pineapplepenapple|apple|pen|applepen|pine|pineapple\", \"output\": \"pine apple pen apple|pine applepen apple|pineapple pen apple\"}\n{\"input\": \"pineapplepenapple|apple|pen|applepen|pine|pineapple\", \"output\": \"pine apple pen apple|pine applepen apple|pineapple pen apple\"}\n{\"input\": \"pineapplepenapple|apple|pen|applepen|pine|pineapple\", \"output\": \"pine apple pen apple|pine applepen apple|pineapple pen apple\"}\n{\"input\": \"catsandog|cats|dog|sand|and|cat\", \"output\": \"\"}\n{\"input\": \"pineapplepenapple|apple|pen|applepen|pine|pineapple\", \"output\": \"pine apple pen apple|pine applepen apple|pineapple pen apple\"}\n{\"input\": \"catsanddog|cat|cats|and|sand|dog\", \"output\": \"cat sand dog|cats and dog\"}\n{\"input\": \"catsanddog|cat|cats|and|sand|dog\", \"output\": \"cat sand dog|cats and dog\"}\n{\"input\": \"pineapplepenapple|apple|pen|applepen|pine|pineapple\", \"output\": \"pine apple pen apple|pine applepen apple|pineapple pen apple\"}\n{\"input\": \"catsandog|cats|dog|sand|and|cat\", \"output\": \"\"}\n{\"input\": \"catsanddog|cat|cats|and|sand|dog\", \"output\": \"cat sand dog|cats and dog\"}\n{\"input\": \"catsanddog|cat|cats|and|sand|dog\", \"output\": \"cat sand dog|cats and dog\"}\n{\"input\": \"pineapplepenapple|apple|pen|applepen|pine|pineapple\", \"output\": \"pine apple pen apple|pine applepen apple|pineapple pen apple\"}\n{\"input\": \"catsanddog|cat|cats|and|sand|dog\", \"output\": \"cat sand dog|cats and dog\"}\n{\"input\": \"pineapplepenapple|apple|pen|applepen|pine|pineapple\", \"output\": \"pine apple pen apple|pine applepen apple|pineapple pen apple\"}\n{\"input\": \"catsanddog|cat|cats|and|sand|dog\", \"output\": \"cat sand dog|cats and dog\"}\n{\"input\": \"catsandog|cats|dog|sand|and|cat\", \"output\": \"\"}\n{\"input\": \"pineapplepenapple|apple|pen|applepen|pine|pineapple\", \"output\": \"pine apple pen apple|pine applepen apple|pineapple pen apple\"}\n{\"input\": \"pineapplepenapple|apple|pen|applepen|pine|pineapple\", \"output\": \"pine apple pen apple|pine applepen apple|pineapple pen apple\"}\n{\"input\": \"catsandog|cats|dog|sand|and|cat\", \"output\": \"\"}\n{\"input\": \"pineapplepenapple|apple|pen|applepen|pine|pineapple\", \"output\": \"pine apple pen apple|pine applepen apple|pineapple pen apple\"}\n{\"input\": \"catsandog|cats|dog|sand|and|cat\", \"output\": \"\"}\n{\"input\": \"catsandog|cats|dog|sand|and|cat\", \"output\": \"\"}\n",
        "test_case_generator":"class TestCaseGenerator:\n    def generate(self) -> dict:\n        # Generate a simple test case input\n        test_cases = [\n            {'s': \"catsanddog\", 'wordDict': [\"cat\", \"cats\", \"and\", \"sand\", \"dog\"]},\n            {'s': \"pineapplepenapple\", 'wordDict': [\"apple\", \"pen\", \"applepen\", \"pine\", \"pineapple\"]},\n            {'s': \"catsandog\", 'wordDict': [\"cats\", \"dog\", \"sand\", \"and\", \"cat\"]}\n        ]\n        # Randomly select one of the test cases\n        import random\n        return random.choice(test_cases)\n\n    def encode_input(self, input_obj) -> str:\n        # Convert a test case input into a string\n        return f\"{input_obj['s']}|{'|'.join(input_obj['wordDict'])}\"\n\n    def encode_output(self, output_obj) -> str:\n        # Convert a test case output into a string\n        return '|'.join(output_obj)\n\n    def decode_input(self, input_str) -> dict:\n        # Convert a test case input string into a Python dict\n        s, *wordDict = input_str.split('|')\n        return {'s': s, 'wordDict': wordDict}\n\n    def decode_output(self, output_str) -> list:\n        # Convert a test case output string into a list of strings\n        return output_str.split('|')",
        "import_code":"from typing import List\nimport random",
        "setup_code":"\"\"\"\nThe Solution class contains:\n  - `wordBreak`: A method to identify all possible sentences from string s using words from wordDict.\n  \nThe TestCaseGenerator class contains methods for:\n  - Generating test cases\n  - Encoding\/decoding input and output for test scenarios\n\"\"\"\n\n# Define the Solution class as per the provided solution\nclass Solution:\n    def __init__(self):\n        self.memory = {}\n        self.wordDict = set()\n\n    def wordBreak(self, s: str, wordDict: List[str]) -> List[str]:\n        self.memory = {}\n        self.wordDict = set(wordDict)\n        return self.backTracking(s)\n\n    def backTracking(self, s):\n        if s == '':\n            return ['']\n        if s in self.memory:\n            return self.memory[s]\n        sentences = []\n        for i in range(1, len(s)+1):\n            word = s[:i]\n            if word in self.wordDict:\n                rest_sentences = self.backTracking(s[i:])\n                for sentence in rest_sentences:\n                    if sentence:\n                        sentences.append(word + ' ' + sentence)\n                    else:\n                        sentences.append(word)\n        self.memory[s] = sentences\n        return sentences\n\n# Define a TestCaseGenerator class to test the Solution class\nclass TestCaseGenerator:\n    def generate(self) -> dict:\n        test_cases = [\n            {'s': \"catsanddog\", 'wordDict': [\"cat\", \"cats\", \"and\", \"sand\", \"dog\"]},\n            {'s': \"pineapplepenapple\", 'wordDict': [\"apple\", \"pen\", \"applepen\", \"pine\", \"pineapple\"]},\n            {'s': \"catsandog\", 'wordDict': [\"cats\", \"dog\", \"sand\", \"and\", \"cat\"]}\n        ]\n        return random.choice(test_cases)\n\n    def encode_input(self, input_obj) -> str:\n        return f\"{input_obj['s']}|{'|'.join(input_obj['wordDict'])}\"\n\n    def encode_output(self, output_obj) -> str:\n        return '|'.join(output_obj)\n\n    def decode_input(self, input_str) -> dict:\n        s, *wordDict = input_str.split('|')\n        return {'s': s, 'wordDict': wordDict}\n\n    def decode_output(self, output_str) -> list:\n        return output_str.split('|')",
        "entry_point":"wordBreak"
    },
    {
        "question_id":134,
        "name":"gas-station",
        "test_case":"{\"input\": \"[4, 6]|[9, 1]\", \"output\": \"1\"}\n{\"input\": \"[5, 7, 9, 2, 6]|[5, 0, 6, 10, 0]\", \"output\": \"0\"}\n{\"input\": \"[5, 0, 8]|[8, 0, 2]\", \"output\": \"1\"}\n{\"input\": \"[10, 7, 3]|[10, 2, 7]\", \"output\": \"0\"}\n{\"input\": \"[7, 8]|[7, 0]\", \"output\": \"0\"}\n{\"input\": \"[3, 8, 0, 9, 2, 3, 7]|[3, 1, 2, 3, 2, 6, 1]\", \"output\": \"0\"}\n{\"input\": \"[7, 2, 4]|[9, 10, 6]\", \"output\": \"-1\"}\n{\"input\": \"[4, 7, 9, 1]|[5, 5, 6, 10]\", \"output\": \"-1\"}\n{\"input\": \"[10, 1]|[2, 4]\", \"output\": \"0\"}\n{\"input\": \"[1, 5, 0, 9]|[5, 4, 1, 0]\", \"output\": \"1\"}\n{\"input\": \"[0, 9, 4, 0, 5, 6, 4, 2, 10, 7]|[5, 10, 3, 2, 10, 9, 1, 4, 3, 1]\", \"output\": \"-1\"}\n{\"input\": \"[1, 3, 3, 5, 5]|[8, 4, 3, 3, 0]\", \"output\": \"-1\"}\n{\"input\": \"[7, 8, 0, 2]|[4, 6, 2, 9]\", \"output\": \"-1\"}\n{\"input\": \"[8, 10, 8, 6, 9, 7, 5, 9, 5, 3]|[4, 4, 5, 7, 1, 2, 1, 3, 4, 1]\", \"output\": \"0\"}\n{\"input\": \"[10, 0, 2, 7]|[2, 4, 3, 4]\", \"output\": \"0\"}\n{\"input\": \"[3, 7, 10]|[5, 8, 7]\", \"output\": \"2\"}\n{\"input\": \"[6, 3, 8, 3, 7, 2]|[8, 1, 7, 8, 3, 9]\", \"output\": \"-1\"}\n{\"input\": \"[0, 7, 4, 7, 1, 8, 8, 8, 3]|[4, 3, 5, 7, 3, 6, 4, 6, 5]\", \"output\": \"1\"}\n{\"input\": \"[0]|[0]\", \"output\": \"0\"}\n{\"input\": \"[4, 7, 8, 4, 8, 7, 7, 7]|[10, 7, 5, 8, 7, 1, 0, 0]\", \"output\": \"4\"}\n{\"input\": \"[10, 5, 3]|[1, 7, 8]\", \"output\": \"0\"}\n{\"input\": \"[6, 3, 5, 0, 6, 8, 1]|[10, 3, 9, 4, 10, 10, 3]\", \"output\": \"-1\"}\n{\"input\": \"[1, 4, 9, 10]|[10, 0, 4, 9]\", \"output\": \"1\"}\n{\"input\": \"[1, 8, 8, 0, 6, 9, 5]|[5, 5, 7, 8, 10, 1, 1]\", \"output\": \"5\"}\n{\"input\": \"[10, 3, 0, 0, 10, 10, 9, 9]|[3, 5, 6, 5, 2, 1, 3, 5]\", \"output\": \"4\"}\n{\"input\": \"[6, 3]|[5, 5]\", \"output\": \"-1\"}\n{\"input\": \"[8]|[9]\", \"output\": \"-1\"}\n{\"input\": \"[7, 1, 0, 6, 0, 3, 6, 2, 8]|[9, 4, 0, 3, 0, 3, 3, 1, 7]\", \"output\": \"2\"}\n{\"input\": \"[6, 6, 8]|[10, 10, 9]\", \"output\": \"-1\"}\n{\"input\": \"[4, 6, 1, 8, 9, 0, 2, 6, 7]|[5, 6, 9, 9, 10, 7, 7, 8, 5]\", \"output\": \"-1\"}\n{\"input\": \"[7, 0, 10, 10]|[10, 1, 8, 10]\", \"output\": \"-1\"}\n{\"input\": \"[3, 3, 1, 0, 6, 4]|[0, 9, 3, 5, 10, 3]\", \"output\": \"-1\"}\n{\"input\": \"[4, 4, 9, 7, 10, 8, 4, 1, 4, 3]|[3, 7, 7, 1, 5, 5, 3, 1, 9, 5]\", \"output\": \"2\"}\n{\"input\": \"[5, 1, 0, 9, 7, 0, 3]|[8, 0, 3, 3, 8, 3, 9]\", \"output\": \"-1\"}\n{\"input\": \"[9, 0]|[9, 6]\", \"output\": \"-1\"}\n{\"input\": \"[5, 1, 6, 9, 2, 0, 6, 9]|[8, 8, 1, 1, 2, 2, 4, 9]\", \"output\": \"2\"}\n{\"input\": \"[4, 2, 7, 1, 6]|[3, 2, 6, 5, 6]\", \"output\": \"-1\"}\n{\"input\": \"[7, 2, 7, 2, 7, 8]|[6, 7, 9, 7, 7, 8]\", \"output\": \"-1\"}\n{\"input\": \"[4, 0, 6, 2, 1]|[6, 9, 3, 3, 9]\", \"output\": \"-1\"}\n{\"input\": \"[10, 4, 1, 5, 5, 6, 9, 10, 2]|[2, 9, 4, 0, 3, 5, 10, 5, 4]\", \"output\": \"0\"}\n{\"input\": \"[9, 5, 2, 8]|[2, 0, 9, 9]\", \"output\": \"0\"}\n{\"input\": \"[6, 2, 0, 10, 1, 4, 5, 6]|[0, 2, 3, 5, 1, 5, 5, 8]\", \"output\": \"0\"}\n{\"input\": \"[5, 10, 8, 3, 8, 10, 10, 10, 8]|[4, 3, 9, 5, 9, 3, 0, 7, 9]\", \"output\": \"0\"}\n{\"input\": \"[0, 8, 2, 7, 0, 2, 5, 7, 2, 5]|[5, 1, 9, 5, 8, 1, 5, 1, 10, 4]\", \"output\": \"-1\"}\n{\"input\": \"[0, 8, 2, 8, 0, 5, 6, 7, 1]|[2, 9, 6, 4, 7, 5, 4, 4, 7]\", \"output\": \"-1\"}\n{\"input\": \"[1, 10, 9, 2]|[1, 0, 2, 2]\", \"output\": \"0\"}\n{\"input\": \"[7, 0, 7]|[3, 2, 4]\", \"output\": \"0\"}\n{\"input\": \"[10, 1, 7, 10, 4, 6]|[0, 7, 2, 4, 0, 5]\", \"output\": \"0\"}\n{\"input\": \"[3, 6, 0, 5, 8]|[7, 8, 5, 1, 6]\", \"output\": \"-1\"}\n{\"input\": \"[6, 1, 9, 8, 1]|[0, 5, 6, 8, 1]\", \"output\": \"0\"}\n{\"input\": \"[10, 0, 10, 1, 7, 6, 8, 9]|[5, 10, 1, 9, 1, 10, 4, 4]\", \"output\": \"2\"}\n{\"input\": \"[2, 1, 3, 3, 10, 5, 10, 0, 2]|[3, 2, 6, 4, 10, 6, 10, 10, 10]\", \"output\": \"-1\"}\n{\"input\": \"[9, 6, 4, 8, 1, 8, 8, 9, 5]|[2, 4, 3, 6, 6, 10, 0, 1, 2]\", \"output\": \"0\"}\n{\"input\": \"[3]|[4]\", \"output\": \"-1\"}\n{\"input\": \"[1, 0]|[9, 8]\", \"output\": \"-1\"}\n{\"input\": \"[8, 0, 0, 10, 0, 10, 5, 6]|[0, 8, 0, 6, 5, 3, 4, 8]\", \"output\": \"5\"}\n{\"input\": \"[0]|[9]\", \"output\": \"-1\"}\n{\"input\": \"[1, 10, 4]|[6, 9, 5]\", \"output\": \"-1\"}\n{\"input\": \"[9, 4]|[2, 0]\", \"output\": \"0\"}\n{\"input\": \"[5, 2, 9, 1, 3, 3, 4]|[5, 2, 10, 7, 2, 5, 2]\", \"output\": \"-1\"}\n{\"input\": \"[6, 0, 3, 0, 4]|[10, 6, 7, 2, 0]\", \"output\": \"-1\"}\n{\"input\": \"[6]|[5]\", \"output\": \"0\"}\n{\"input\": \"[2, 0, 2]|[6, 5, 3]\", \"output\": \"-1\"}\n{\"input\": \"[0, 2, 6, 7, 7, 5, 10, 5, 4, 1]|[2, 5, 7, 8, 2, 9, 0, 9, 10, 9]\", \"output\": \"-1\"}\n{\"input\": \"[1, 8, 5, 8, 4, 8, 8, 3]|[3, 3, 4, 4, 2, 5, 1, 3]\", \"output\": \"1\"}\n{\"input\": \"[0, 6, 0, 0, 5, 0, 4]|[1, 1, 5, 4, 7, 4, 5]\", \"output\": \"-1\"}\n{\"input\": \"[10, 4, 10]|[3, 4, 3]\", \"output\": \"0\"}\n{\"input\": \"[3, 7, 8]|[5, 6, 8]\", \"output\": \"-1\"}\n{\"input\": \"[5, 10, 9]|[4, 2, 5]\", \"output\": \"0\"}\n{\"input\": \"[2, 3]|[10, 8]\", \"output\": \"-1\"}\n{\"input\": \"[6, 7, 5, 2]|[5, 6, 0, 7]\", \"output\": \"0\"}\n{\"input\": \"[4, 7, 1, 1]|[7, 3, 6, 6]\", \"output\": \"-1\"}\n{\"input\": \"[8]|[9]\", \"output\": \"-1\"}\n{\"input\": \"[5, 2, 9, 0, 0, 4, 3, 7]|[4, 0, 3, 10, 0, 2, 7, 5]\", \"output\": \"-1\"}\n{\"input\": \"[8, 5, 1, 7, 3, 8, 1, 4]|[6, 6, 2, 5, 5, 10, 3, 4]\", \"output\": \"-1\"}\n{\"input\": \"[2, 8, 5]|[4, 4, 4]\", \"output\": \"1\"}\n{\"input\": \"[2, 8]|[9, 2]\", \"output\": \"-1\"}\n{\"input\": \"[0, 6, 4, 6, 8, 10]|[5, 10, 3, 5, 3, 4]\", \"output\": \"2\"}\n{\"input\": \"[5, 0, 9, 0, 6, 7, 3, 6, 1, 9]|[4, 2, 4, 8, 8, 2, 5, 9, 9, 9]\", \"output\": \"-1\"}\n{\"input\": \"[0, 1, 4, 7, 3, 6, 9, 5, 7]|[7, 1, 7, 8, 4, 4, 4, 1, 8]\", \"output\": \"-1\"}\n{\"input\": \"[8, 6, 9, 6, 4, 0, 3, 7, 10, 6]|[0, 1, 3, 9, 2, 3, 3, 4, 7, 6]\", \"output\": \"0\"}\n{\"input\": \"[0, 4, 3]|[10, 1, 10]\", \"output\": \"-1\"}\n{\"input\": \"[8, 8, 0, 2, 9, 8, 5, 6, 4, 2]|[1, 1, 8, 2, 3, 4, 9, 4, 0, 6]\", \"output\": \"0\"}\n{\"input\": \"[4, 6]|[7, 1]\", \"output\": \"1\"}\n{\"input\": \"[2, 7, 10, 3, 6, 7]|[2, 0, 9, 0, 5, 3]\", \"output\": \"0\"}\n{\"input\": \"[3, 0]|[10, 5]\", \"output\": \"-1\"}\n{\"input\": \"[8, 6, 0]|[10, 3, 9]\", \"output\": \"-1\"}\n{\"input\": \"[1, 8, 2, 6, 0, 9, 5, 1, 8]|[2, 3, 9, 1, 1, 4, 2, 0, 9]\", \"output\": \"3\"}\n{\"input\": \"[5, 9, 6, 0, 6, 0, 10, 10, 6, 7]|[0, 0, 5, 4, 4, 3, 6, 9, 1, 6]\", \"output\": \"0\"}\n{\"input\": \"[6, 9, 1, 0, 6]|[8, 8, 4, 6, 2]\", \"output\": \"-1\"}\n{\"input\": \"[3, 5, 2, 2, 0, 3, 3]|[3, 0, 8, 3, 0, 8, 3]\", \"output\": \"-1\"}\n{\"input\": \"[7, 7]|[6, 7]\", \"output\": \"0\"}\n{\"input\": \"[3, 6, 10, 9, 3, 0, 2, 3]|[0, 4, 9, 10, 2, 4, 7, 6]\", \"output\": \"-1\"}\n{\"input\": \"[1, 7]|[2, 5]\", \"output\": \"1\"}\n{\"input\": \"[2, 10, 7, 8, 9, 9]|[8, 6, 10, 10, 5, 5]\", \"output\": \"4\"}\n{\"input\": \"[3, 10, 4, 8, 4]|[3, 3, 0, 9, 5]\", \"output\": \"0\"}\n{\"input\": \"[10, 9, 10, 2, 3, 7, 2]|[7, 8, 10, 6, 9, 8, 9]\", \"output\": \"-1\"}\n{\"input\": \"[8, 2, 0, 0, 4]|[0, 6, 1, 1, 8]\", \"output\": \"-1\"}\n{\"input\": \"[8, 8, 4, 0, 1, 2, 1, 9, 8]|[0, 0, 8, 8, 1, 10, 9, 8, 3]\", \"output\": \"-1\"}\n{\"input\": \"[10, 8]|[2, 7]\", \"output\": \"0\"}\n{\"input\": \"[2, 5, 8, 2, 8, 5, 1, 8]|[8, 0, 6, 0, 10, 10, 10, 5]\", \"output\": \"-1\"}\n{\"input\": \"[3, 7, 10, 3, 1]|[9, 10, 2, 6, 1]\", \"output\": \"-1\"}\n{\"input\": \"[7]|[9]\", \"output\": \"-1\"}\n{\"input\": \"[0]|[1]\", \"output\": \"-1\"}\n{\"input\": \"[4, 7, 9, 2, 10]|[3, 1, 7, 1, 7]\", \"output\": \"0\"}\n{\"input\": \"[2, 8, 10, 7, 2, 5]|[8, 10, 6, 10, 5, 3]\", \"output\": \"-1\"}\n{\"input\": \"[5, 8, 2, 8]|[0, 0, 0, 0]\", \"output\": \"0\"}\n{\"input\": \"[10, 10, 2, 4, 10, 10, 0, 3]|[2, 10, 0, 8, 5, 7, 9, 3]\", \"output\": \"0\"}\n{\"input\": \"[10, 4, 6, 7]|[6, 2, 1, 5]\", \"output\": \"0\"}\n{\"input\": \"[7, 1, 0, 7, 6, 2, 0, 1]|[6, 0, 10, 2, 8, 8, 6, 8]\", \"output\": \"-1\"}\n{\"input\": \"[4, 0, 3, 6, 5, 8]|[2, 2, 4, 9, 1, 4]\", \"output\": \"4\"}\n{\"input\": \"[8, 2, 10, 9, 10, 3, 6, 2, 3]|[9, 2, 2, 3, 6, 9, 7, 8, 8]\", \"output\": \"-1\"}\n{\"input\": \"[6, 1, 6, 5, 2, 6, 8, 0]|[5, 7, 2, 3, 6, 10, 10, 2]\", \"output\": \"-1\"}\n{\"input\": \"[8, 1]|[0, 6]\", \"output\": \"0\"}\n{\"input\": \"[10, 10, 5, 6, 7]|[3, 7, 0, 6, 9]\", \"output\": \"0\"}\n{\"input\": \"[10, 10, 10, 0, 9, 9]|[6, 2, 10, 8, 9, 0]\", \"output\": \"0\"}\n{\"input\": \"[6, 3, 10]|[6, 10, 8]\", \"output\": \"-1\"}\n{\"input\": \"[2, 3, 8, 7, 1, 3, 7]|[6, 1, 3, 3, 0, 0, 2]\", \"output\": \"1\"}\n{\"input\": \"[0, 8]|[3, 3]\", \"output\": \"1\"}\n{\"input\": \"[2, 6, 1]|[8, 2, 4]\", \"output\": \"-1\"}\n{\"input\": \"[6]|[9]\", \"output\": \"-1\"}\n{\"input\": \"[6, 6, 2]|[0, 0, 6]\", \"output\": \"0\"}\n{\"input\": \"[10, 4, 4, 4, 0, 3, 10, 10]|[9, 9, 6, 4, 8, 10, 0, 4]\", \"output\": \"-1\"}\n{\"input\": \"[7]|[4]\", \"output\": \"0\"}\n{\"input\": \"[6, 4, 1, 1, 2]|[9, 8, 3, 1, 5]\", \"output\": \"-1\"}\n{\"input\": \"[9, 0, 5, 0, 3, 0]|[8, 0, 9, 2, 5, 7]\", \"output\": \"-1\"}\n{\"input\": \"[4]|[8]\", \"output\": \"-1\"}\n{\"input\": \"[7, 4, 10]|[5, 7, 8]\", \"output\": \"2\"}\n",
        "test_case_generator":"class TestCaseGenerator:\n    def generate(self) -> dict:\n        # Generate a test case that is within a reasonable range.\n        n = random.randint(1, 10)  # chose 1 to 10 for simplicity\n        gas = [random.randint(0, 10) for _ in range(n)]\n        cost = [random.randint(0, 10) for _ in range(n)]\n        return {'gas': gas, 'cost': cost}\n\n    def encode_input(self, input_obj) -> str:\n        # Convert a test case input into a string\n        return f\"{input_obj['gas']}|{input_obj['cost']}\"\n\n    def encode_output(self, output_obj) -> str:\n        # Convert a test case output into a string\n        return str(output_obj)\n\n    def decode_input(self, input_str) -> dict:\n        # Convert a test case input string into a Python dict\n        gas_str, cost_str = input_str.split('|')\n        gas = list(map(int, gas_str.strip('[]').split(', ')))\n        cost = list(map(int, cost_str.strip('[]').split(', ')))\n        return {'gas': gas, 'cost': cost}\n\n# Example:\n# generator = TestCaseGenerator()\n# print(generator.generate())\n# print(generator.encode_input({'gas': [1, 2, 3], 'cost': [3, 2, 1]}))",
        "import_code":"from typing import List\nimport random",
        "setup_code":"# This setup code defines the necessary data structures and functions required for the solution.\n\n# solution.py\nclass Solution:\n    def canCompleteCircuit(self, gas: List[int], cost: List[int]) -> int:\n        res = 0\n        tank = 0\n        circle_total = 0\n        for station_id, (g, c) in enumerate(zip(gas, cost)):\n            net = g - c\n            circle_total += net\n            tank += net\n            if tank < 0:\n                res = station_id + 1\n                tank = 0\n        return res if circle_total >= 0 else -1\n\n# test_case_generator.py\nclass TestCaseGenerator:\n    def generate(self) -> dict:\n        # Generate a test case that is within a reasonable range.\n        n = random.randint(1, 10)  # chose 1 to 10 for simplicity\n        gas = [random.randint(0, 10) for _ in range(n)]\n        cost = [random.randint(0, 10) for _ in range(n)]\n        return {'gas': gas, 'cost': cost}\n\n    def encode_input(self, input_obj) -> str:\n        # Convert a test case input into a string\n        return f\"{input_obj['gas']}|{input_obj['cost']}\"\n\n    def encode_output(self, output_obj) -> str:\n        # Convert a test case output into a string\n        return str(output_obj)\n\n    def decode_input(self, input_str) -> dict:\n        # Convert a test case input string into a Python dict\n        gas_str, cost_str = input_str.split('|')\n        gas = list(map(int, gas_str.strip('[]').split(', ')))\n        cost = list(map(int, cost_str.strip('[]').split(', ')))\n        return {'gas': gas, 'cost': cost}\n\n# Example usage:\n# generator = TestCaseGenerator()\n# print(generator.generate())\n# print(generator.encode_input({'gas': [1, 2, 3], 'cost': [3, 2, 1]}))",
        "entry_point":"canCompleteCircuit"
    }
]